{"version":3,"sources":["components/homepage.tsx","models/patient.ts","models/doctor.ts","models/department.ts","redux/action-mappers.ts","redux/reducers.ts","redux/store.ts","api/apipatient.ts","components/patients/patientLogin.tsx","components/HomeNavigation.tsx","components/patients/patientNavigation.tsx","components/patients/displaypatientAppointment.tsx","components/patients/patientAppointment.tsx","components/patients/changeTimeSlot.tsx","models/appointmentstatus.ts","models/appointmentType.ts","components/patients/appointmentForm.tsx","components/patients/ExpNewAppointment.tsx","components/patients/displaydoctorappointment.tsx","components/patients/departmentDoctors.tsx","components/patients/newAppointment.tsx","components/patients/patienthome.tsx","api/apidoctor.ts","components/doctor/doctorlogin.tsx","components/doctor/doctorAppointments.tsx","components/doctor/doctorNavigation.tsx","components/doctor/doctorHome.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["HomePageComponent","React","Component","Patient","patientId","firstName","lastName","gender","username","password","birthDate","address","phone","email","lastRecord","this","Doctor","doctorId","speciality","department","appointments","Department","id","doctor","departmentName","loginTypes","loginSavePatient","patient","type","playload","loginSaveDoctor","defaultUser","state","combineReducers","loginUser","action","enhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","thunk","store","createStore","project2","axios","create","baseURL","loginpatient","un","pas","a","post","response","data","dispatch","patientAllAppointment","get","Error","departmentDoctors","doctors","saveAppointment","det","dateS","timeS","doct","pat","stat","ty","console","log","details","dateSlot","timeSlot","status","appointment","PatientLoginComponent","props","verifyUser","event","preventDefault","history","push","setUsername","target","value","setState","setPassword","className","style","height","onSubmit","onChange","required","Button","color","PatientLoginComponentR","withRouter","HomeNavigationComponent","Navbar","light","expand","Nav","tabs","NavbarBrand","NavItem","to","activeClassName","PatientNavigationComponent","logoutUser","e","tag","onClick","outline","mapDispatchToProps","PatientNavigationComponentS","connect","PatientNavigationComponentSW","DisplayPatientAppointmentComponent","componentDidMount","appoint","map","elem","key","appointmentId","Card","CardBody","ListGroup","ListGroupItem","statusName","typeName","PatientAppointmentComponent","Container","Row","Col","PatientAppointmentComponentW","ChangeTimeSlotComponent","changeView","timeFromTo","Status","statusId","Type","typeId","AppointmentModalComponent","changeModal","onChangesDetails","onChangesType","onSubmits","dateslot","timeslot","doctor1","typename","changeType","Modal","isOpen","onDisplay","Form","FormGroup","Label","Input","name","disabled","AppointmentModalComponentS","EXpNewAppointmentComponent","makeApointments","tomorrowO","dayAfterTO","tomorrow1","Date","tomorrowutc","UTC","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","setDate","getDate","tomorrow","toISOString","slice","dayafterT1","dayafterutc","dayafterT","today1","today","parts","toString","split","appointdate","Number","OnTimeSlot","filter","dayAfterT","tomorrowDate","dayAfterDate","modal","onClicks","date","Table","slots","DisplayDoctorComponent","toggle","Collapse","DepartmentDoctorsComponent","departmentid","toUpperCase","NewAppointmentComponent","fluid","sm","path","render","PatientHomeComponent","loginDoctor","DoctorLoginComponent","DoctorLoginComponentR","DoctorAppointmentComponent","DoctorNavigationComponent","DoctorNavigationComponentS","DoctorNavigationComponentSW","DoctorHomeComponent","App","AppS","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.68c9fca0.chunk.js","sourcesContent":["\r\nimport React from 'react';\r\nimport { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\r\nimport { HomeNavigationComponent } from './HomeNavigation';\r\nimport { PatientLoginComponent, PatientLoginComponentR } from './patients/patientLogin';\r\n\r\n\r\nexport class HomePageComponent extends React.Component {\r\n\r\n\r\n    render(){\r\n        return(\r\n<>\r\n\r\n\r\n\r\n<Router>\r\n         {/* <HomeNavigationComponent/> */}\r\n{/* <Switch>\r\n<Route path=\"/patientlogin\">\r\n<PatientLoginComponentR/>\r\n</Route>\r\n\r\n<Route path=\"/doctorlogin\">\r\n\r\n</Route>\r\n\r\n\r\n</Switch> */}\r\n\r\n\r\n</Router>\r\n\r\n\r\n\r\n</>\r\n\r\n\r\n\r\n\r\n        )\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}","import { LastRecord } from \"./lastRecord\";\r\n\r\n\r\n\r\nexport interface IPatient {\r\n\r\npatientId:number,\r\nfirstName:string,\r\nlastName:string,\r\ngender:string,\r\nusername:string,\r\npassword:string,\r\nbirthDate:number,\r\naddress:string,\r\nphone:string,\r\nemail:string,\r\n\r\nlastRecord?:LastRecord\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\nexport class Patient implements IPatient{\r\n    patientId: number;\r\n    firstName: string;\r\n    lastName: string;\r\n    gender: string;\r\n    username: string;\r\n    password: string;\r\n    birthDate: number;\r\n    address: string;\r\n    phone: string;\r\n    email: string;\r\n    lastRecord?:LastRecord\r\n\r\n    constructor(patientId:number,firstName:string,lastName:string,gender:string,username:string,password:string,birthDate:number,address:string,phone:string,email:string,lastRecord?:LastRecord){\r\n\r\nthis.patientId=patientId;\r\nthis.firstName=firstName;\r\nthis.lastName=lastName;\r\nthis.gender=gender;\r\nthis.username=username;\r\nthis.password=password;\r\nthis.birthDate=birthDate;\r\nthis.address=address;\r\nthis.phone=phone;\r\nthis.email=email;\r\nthis.lastRecord=lastRecord;\r\n\r\n\r\n        \r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}","import { Department } from \"./department\";\r\nimport { Appointment } from \"./appointment\";\r\n\r\n\r\n\r\n\r\nexport interface IDoctor{\r\n\r\ndoctorId:number,\r\nfirstName:string,\r\nlastName:string,\r\nspeciality:string,\r\nusername:string,\r\npassword:string,\r\ndepartment:Department,\r\nappointments?:Appointment[]\r\n\r\n}\r\n\r\n\r\nexport class Doctor implements IDoctor{\r\n\r\n    doctorId:number;\r\n    firstName:string;\r\nlastName:string;\r\nspeciality:string;\r\nusername:string;\r\npassword:string;\r\ndepartment:Department;\r\nappointments?:Appointment[]\r\n\r\n\r\n\r\n\r\n\r\nconstructor(doctorId:number,firstName:string,lastName:string,speciality:string,username:string,password:string,department:Department,appointments?:Appointment[]){\r\n    this.doctorId=doctorId;\r\n    this.firstName=firstName;\r\n    this.lastName=lastName;\r\n    this.speciality=speciality;\r\n    this.username=username;\r\n    this.password=password;\r\n    this.department=department;\r\n    this.appointments=appointments\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}","import { Doctor } from \"./doctor\";\r\n\r\n\r\n\r\ninterface IDepartment{\r\n\r\nid:number;\r\ndepartmentName:string;\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\nexport class Department implements IDepartment{\r\n\r\nid:number;\r\ndepartmentName:string;\r\ndoctor?:Doctor;\r\n\r\n\r\nconstructor(id:number,department:string,doctor?:Doctor){\r\n\r\n    this.id=id;\r\n    this.departmentName=department;\r\n    this.doctor=doctor;\r\n\r\n}\r\n\r\n\r\n}","import { Patient } from \"../models/patient\"\r\nimport { Doctor } from \"../models/doctor\"\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const loginTypes={\r\n    LOGIN_PATIENT:\"REACT_LOGIN_PATIENT\",\r\n    LOGIN_DOCTOR:\"REACT_LOGIN_DOCTOR\"\r\n\r\n}\r\n\r\n\r\n\r\nexport const loginSavePatient=(patient:Patient)=>{\r\n\r\n    return{\r\n\r\ntype:loginTypes.LOGIN_PATIENT,\r\nplayload:{\r\n    patient\r\n}\r\n\r\n    }\r\n\r\n}\r\n\r\nexport const loginSaveDoctor=(doctor:Doctor)=>{\r\n\r\n    return{\r\n\r\ntype:loginTypes.LOGIN_DOCTOR,\r\nplayload:{\r\n    doctor\r\n}\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import { Patient } from \"../models/patient\";\r\nimport { Doctor } from \"../models/doctor\";\r\nimport { Department } from \"../models/department\";\r\nimport { AnyAction, combineReducers } from \"redux\";\r\nimport { loginTypes } from \"./action-mappers\";\r\nimport { LastRecord } from \"../models/lastRecord\";\r\n\r\ninterface IUser{\r\n    patient:Patient,\r\n    doctor:Doctor\r\n}\r\n\r\n\r\nconst defaultUser:IUser={\r\n    patient:new Patient(0,\"\",\"\",\"\",\"\",\"\",0,\"\",\"\",\"\"),\r\n    doctor:new Doctor(0,\"\",\"\",\"\",\"\",\"\",new Department(0,\"\"))\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const loginReducer=(state:IUser=defaultUser,action:AnyAction)=>{\r\n    switch(action.type){\r\n\r\n        case loginTypes.LOGIN_PATIENT:{\r\n            \r\n            const patient=action.playload.patient;\r\n            return{\r\n                ...state,\r\n                patient:patient\r\n            }\r\n\r\n\r\n        }\r\n\r\n        case loginTypes.LOGIN_DOCTOR:{\r\n            const doctor=action.playload.doctor;\r\n            return {\r\n                ...state,\r\n                doctor:doctor\r\n            }\r\n\r\n        }\r\n\r\n        default:\r\n            return state\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\nexport interface IState{\r\n    loginUser:IUser\r\n}\r\n\r\nexport const state=combineReducers<IState>({\r\n    loginUser:loginReducer\r\n\r\n})\r\n\r\n","\r\nimport { compose, applyMiddleware, Store, createStore, combineReducers } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { state } from './reducers';\r\n\r\n\r\nconst composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\n\r\n\r\n\r\nconst enhancer = composeEnhancers(\r\n    applyMiddleware(thunk)\r\n  )\r\n  \r\n\r\n\r\n  export const store:Store<any>=createStore(\r\n      state,\r\n      enhancer\r\n  )\r\n  ","import axios from 'axios';\r\nimport { store } from '../redux/store';\r\nimport { Patient } from '../models/patient';\r\nimport { loginSavePatient, loginSaveDoctor } from '../redux/action-mappers';\r\nimport { Doctor } from '../models/doctor';\r\nimport { Department } from '../models/department';\r\nimport { Appointment } from '../models/appointment';\r\nimport { Status } from '../models/appointmentstatus';\r\nimport { Type } from '../models/appointmentType';\r\n\r\n\r\nexport const project2 = axios .create({\r\n    baseURL: 'http://localhost:8080/',\r\n\r\n    // baseURL: \"localhost:8080/\",\r\n    // If you don't have the following line, your login won't work!\r\n    // withCredentials: true,\r\n});\r\n\r\n\r\n\r\n//login patient\r\nexport const loginpatient=async(un:string,pas:string)=>{\r\ntry{\r\nlet response=await project2.post(\"/patients/login\",{username:un,password:pas});\r\nconst{patientId,lastRecord,firstName,lastName,gender,username,password,birthDate,address,phone,email}=response.data;\r\nlet patient=new Patient(patientId,firstName,lastName,gender,username,password,birthDate,address,phone,email,lastRecord);\r\nstore.dispatch(loginSavePatient(patient));\r\nstore.dispatch(loginSaveDoctor(new Doctor(0,\"\",\"\",\"\",\"\",\"\",new Department(0,\"\"))));\r\nreturn response;\r\n}\r\ncatch(e){\r\n    throw e;\r\n}\r\n\r\n}\r\n\r\n\r\n//get all the appointmetns of a patient\r\nexport const patientAllAppointment=async(patientId:number):Promise<any>=>{\r\n    try{\r\n\r\n        let response=await project2.get(`appointments/patient/${patientId}`);\r\n    if(response.data<1){\r\n        throw new Error;\r\n\r\n    }else{\r\n        return response.data;\r\n    }\r\n    \r\n\r\n\r\n    }catch(e){\r\n        throw e;\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n\r\n//get all the doctors of a department\r\n\r\nexport const departmentDoctors=async(id:number)=>{\r\n\r\n    try{\r\n\r\n        let doctors=await project2.get(`departments/${id}/doctors`);\r\n        return doctors.data;\r\n\r\n    }catch(e){\r\n        throw e;\r\n    }\r\n\r\n}\r\n\r\nexport const saveAppointment=async(det:string,dateS:Date,timeS:number,doct:Doctor,pat:Patient,stat:Status,ty:Type)=>{\r\n    try{\r\n        console.log(dateS);\r\n\r\nlet id=0;\r\nlet appointment=await project2.post(\"/appointments\",{id,details:det,dateSlot:dateS,timeSlot:timeS,doctor:doct,patient:pat,status:stat,type:ty});\r\nreturn appointment.data;\r\n    }catch(e){\r\n        throw e;\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { Button, Container, Row, Col } from \"reactstrap\";\r\n\r\nimport { withRouter } from 'react-router-dom';\r\nimport { toast, ToastContainer } from \"react-toastify\";\r\nimport { loginpatient } from '../../api/apipatient';\r\n\r\n\r\nexport class PatientLoginComponent extends React.Component<any,any>{\r\n\r\nconstructor(props:any){\r\n    super(props);\r\n    this.state={\r\n        username:\"\",\r\n        password:\"\"\r\n    }\r\n\r\n}\r\n\r\n\r\nverifyUser=async(event:any)=>{\r\n    event.preventDefault();\r\n   \r\n    try{\r\nlet patient =await loginpatient(this.state.username,this.state.password);\r\nconsole.log(patient);\r\nthis.props.history.push(\"/patient/home\");\r\n\r\n\r\n    }catch(e){\r\n        // toast(\"invalid credentials\", { type: \"error\" });\r\n        console.log(e);\r\n\r\n    }\r\n\r\n\r\n  \r\n\r\n\r\n}\r\n\r\nsetUsername=(event:any)=>{\r\n    let username = event.target.value;\r\n    this.setState({\r\n        username: username\r\n    })\r\n\r\n\r\n\r\n}\r\n\r\nsetPassword=(event:any)=>{\r\n    let password = event.target.value;\r\n    this.setState({\r\n        password: password\r\n    })\r\n\r\n}\r\n\r\n\r\n\r\n\r\n    render(){\r\n\r\n\r\n        return(\r\n            <div className=\"row align-items-center justify-content-center \" style={{ height: \"80%\" }}  >\r\n            <div className=\"login-column\">\r\n            <form onSubmit={this.verifyUser} className=\"form-signin \" >\r\n                <h2 > Please Sign In</h2>\r\n                <br/>\r\n                <div className=\"form-group\">\r\n                    <label><span className=\"font-weight-bold\">UserName:</span><input type=\"text\" className=\"form-control\" value={this.state.username} onChange={this.setUsername} required /></label>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label><span className=\"font-weight-bold\">Password:</span><input type=\"password\" className=\"form-control\" value={this.state.password} onChange={this.setPassword} required /></label>\r\n                </div>\r\n                {/* <button className=\"btn btn-primary\" type=\"submit\">Login</button> */}\r\n                <Button color=\"primary\" className=\"btn-block\">Login</Button>\r\n            </form>\r\n            </div>\r\n            </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n        )\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n\r\nexport const PatientLoginComponentR=withRouter(PatientLoginComponent);","import React from \"react\";\r\nimport { NavbarBrand, Navbar, Nav, NavItem } from \"reactstrap\";\r\n\r\nimport { NavLink, withRouter } from 'react-router-dom';\r\n\r\nexport class HomeNavigationComponent extends React.Component<any,any>{\r\n\r\n    render(){\r\n\r\nreturn(\r\n\r\n    <div>\r\n    <Navbar  color=\"light\" light expand=\"md\">\r\n\r\n      <Nav  tabs className=\"w-100\">\r\n      <NavbarBrand>\r\n                    \r\n                 \r\n                </NavbarBrand>\r\n        <NavItem>\r\n          <NavLink  to=\"/patientlogin\" className=\"nav-link\" activeClassName=\"active\">Patient</NavLink>\r\n        </NavItem>\r\n        <NavItem>\r\n          <NavLink  to=\"/doctorlogin\" className=\"nav-link\" activeClassName=\"active\">Doctor</NavLink>\r\n        </NavItem>\r\n        <NavItem>\r\n          <NavLink  to=\"/home\" className=\"nav-link\" activeClassName=\"active\">home</NavLink>\r\n        </NavItem>\r\n      \r\n      \r\n\r\n\r\n      </Nav>\r\n      {/* <NavItem className=\"float-right\" tag={() => { return <Button className=\"float-right\" onClick={this.logoutUser} color=\"primary\" outline>Logout</Button> }} /> */}\r\n    </Navbar>\r\n\r\n\r\n\r\n  </div>\r\n\r\n\r\n\r\n\r\n\r\n)\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    \r\n}","import React from \"react\";\r\nimport { Navbar, Nav, NavbarBrand, NavItem, Button } from \"reactstrap\";\r\n\r\nimport { NavLink, withRouter } from 'react-router-dom';\r\nimport { IState } from \"../../redux/reducers\";\r\n\r\nimport { loginSavePatient,loginSaveDoctor} from \"../../redux/action-mappers\";\r\nimport { connect } from \"react-redux\";\r\n\r\nexport class PatientNavigationComponent extends React.Component<any,any>{\r\n\r\n\r\n    logoutUser = (e: any) => {\r\n   \r\n        // console.log(this.props.location.pathname)\r\n        this.props.loginSavePatient(null);\r\n        this.props.loginSaveDoctor(null);\r\n        this.props.history.push(\"/home\");\r\n    \r\n    \r\n      }\r\n\r\n\r\n\r\n    render(){\r\n\r\nreturn(\r\n\r\n\r\n<>\r\n    <Navbar  color=\"light\" light expand=\"md\">\r\n\r\n    <Nav  tabs className=\"w-100\">\r\n    <NavbarBrand>\r\n                  \r\n               \r\n              </NavbarBrand>\r\n      <NavItem>\r\n        <NavLink  to=\"/patient/appointments\" className=\"nav-link\" activeClassName=\"active\">Appointments</NavLink>\r\n      </NavItem>\r\n      <NavItem>\r\n        <NavLink  to=\"/patient/newappointment\" className=\"nav-link\" activeClassName=\"active\">New Appointment</NavLink>\r\n      </NavItem>\r\n      <NavItem className=\"float-right\" tag={() => { return <Button className=\"float-right\" onClick={this.logoutUser} color=\"primary\" outline>Logout</Button> }} />\r\n    \r\n    \r\n\r\n\r\n    </Nav>\r\n    {/* <NavItem className=\"float-right\" tag={() => { return <Button className=\"float-right\" onClick={this.logoutUser} color=\"primary\" outline>Logout</Button> }} /> */}\r\n  </Navbar>\r\n  </>\r\n\r\n)\r\n\r\n    }\r\n\r\n\r\n\r\n    \r\n}\r\n\r\n\r\nconst mapStateToProps = (state: IState) => {\r\n \r\n    return {\r\n      ...state.loginUser\r\n    }\r\n  \r\n  }\r\n  \r\n  const mapDispatchToProps = {\r\nloginSavePatient,\r\nloginSaveDoctor\r\n\r\n  \r\n  \r\n  }\r\n  \r\n  \r\n  export let  PatientNavigationComponentS = connect(mapStateToProps, mapDispatchToProps)( PatientNavigationComponent);\r\n  export let PatientNavigationComponentSW=withRouter( PatientNavigationComponentS);","import React from \"react\";\r\nimport { Container, Row, Card, CardBody, ListGroup, ListGroupItem } from \"reactstrap\";\r\nimport { Appointment } from \"../../models/appointment\";\r\n\r\n\r\n\r\ninterface IDisplayProps{\r\n\r\n    appointments:any;\r\n}\r\n\r\n\r\nexport class DisplayPatientAppointmentComponent extends React.Component<IDisplayProps,any>{\r\n\r\nconstructor(props:IDisplayProps){\r\n    super(props);\r\n    this.state={\r\n        appoint:null\r\n    }\r\n}\r\n\r\n\r\ncomponentDidMount=()=>{\r\n    console.log(this.props.appointments)\r\n    this.setState({\r\n        appoint:this.props.appointments\r\n\r\n    })\r\n}\r\n\r\n\r\n\r\n    render(){\r\nconsole.log(this.state.appoint);\r\n      if(this.state.appoint){\r\nreturn(\r\n      this.state.appoint.map((elem:Appointment)=>{\r\n\r\n\r\n        return(\r\n        <div key={elem.appointmentId}>\r\n          <Card>\r\n              <CardBody>\r\n\r\n<ListGroup>\r\n<ListGroupItem>\r\n    Appointment Id: {elem.appointmentId}\r\n</ListGroupItem>\r\n<ListGroupItem>\r\n    Details: {elem.details}\r\n</ListGroupItem>\r\n<ListGroupItem>\r\n    Date: {elem.dateSlot}\r\n</ListGroupItem>\r\n<ListGroupItem>\r\n    Time: {elem.timeSlot}\r\n</ListGroupItem>\r\n<ListGroupItem>\r\nDoctor: {elem.doctor.firstName} {elem.doctor.lastName}\r\n</ListGroupItem>\r\n<ListGroupItem>\r\nStatus: {elem.status.statusName}\r\n</ListGroupItem>\r\n<ListGroupItem>\r\nType: {elem.type.typeName}\r\n</ListGroupItem>\r\n\r\n\r\n</ListGroup>\r\n\r\n\r\n              </CardBody>\r\n              \r\n              \r\n              \r\n              \r\n              </Card>  \r\n\r\n\r\n\r\n        </div>\r\n        )\r\n\r\n\r\n      })\r\n\r\n)\r\n\r\n      }else{\r\n          return(\r\n              <p>none</p>\r\n          )\r\n      }\r\n\r\n\r\n\r\n    \r\n    }\r\n}","\r\nimport React from \"react\";\r\nimport { patientAllAppointment } from \"../../api/apipatient\";\r\nimport { IState } from \"../../redux/reducers\";\r\nimport { connect } from \"react-redux\";\r\nimport { Container, Row, Col } from \"reactstrap\";\r\nimport { DisplayPatientAppointmentComponent } from \"./displaypatientAppointment\";\r\n\r\n\r\ninterface IPatientAppState{\r\n    appointment:any\r\n}\r\n\r\n\r\nexport class PatientAppointmentComponent extends React.Component<any,IPatientAppState>{\r\n\r\n\r\n    constructor(props:any){\r\n        super(props);\r\n        this.state={\r\n            appointment:null\r\n        }\r\n    }\r\n\r\n\r\ncomponentDidMount=async ()=>{\r\ntry{\r\n   console.log(this.props.patient.patientId)\r\n    let id=this.props.patient.patientId;\r\n    let appointments=await patientAllAppointment(id);\r\n   if(appointments){\r\n    console.log(appointments);\r\n    this.setState({\r\n        appointment:appointments,\r\n    });\r\n   } \r\n   \r\n\r\n}catch(e){\r\n    console.log(e);\r\n\r\n}\r\n\r\n\r\n}\r\n\r\n\r\n    render(){\r\nif(this.state.appointment){\r\n    return(\r\n<>\r\n   <Container>\r\n       <Row>\r\n<Col>\r\n<DisplayPatientAppointmentComponent appointments={this.state.appointment}/>\r\n\r\n\r\n</Col>\r\n\r\n\r\n\r\n       </Row>\r\n       \r\n       \r\n       </Container>   \r\n      \r\n      \r\n        </>\r\n    \r\n        \r\n        \r\n                )\r\n            }\r\n            if(!this.state.appointment){\r\n                return(\r\n                    <p>None</p>\r\n                )\r\n            }\r\n \r\n}\r\n\r\n\r\n\r\n\r\n}\r\n\r\nconst mapStateToProps = (state: IState) => {\r\n \r\n    return {\r\n      ...state.loginUser\r\n    }\r\n  \r\n  }\r\n  \r\n  const mapDispatchToProps = {\r\n// loginSavePatient,\r\n// loginSaveDoctor\r\n\r\n  \r\n  \r\n  }\r\n  \r\n  \r\n  export let  PatientAppointmentComponentW = connect(mapStateToProps, mapDispatchToProps)( PatientAppointmentComponent);","\r\nimport React from \"react\";\r\n\r\n\r\ninterface IProps{\r\n    timeSlot:number\r\n}\r\n\r\ninterface IDisState{\r\n    timeFromTo:any\r\n}\r\n\r\nexport class ChangeTimeSlotComponent extends React.Component<IProps,IDisState>{\r\n\r\n\r\n    constructor(props:IProps){\r\n        super(props);\r\n        this.state={\r\n            timeFromTo:null\r\n        }\r\n    }\r\n\r\ncomponentDidMount=()=>{\r\n    this.changeView(this.props.timeSlot);\r\nconsole.log(this.props.timeSlot);\r\n\r\n\r\n}\r\n\r\nchangeView=(timeSlot:number)=>{\r\n\r\n    switch(timeSlot){\r\n        case 1:\r\n            this.setState({\r\n                timeFromTo:\"10-10:30 AM\"\r\n\r\n            })\r\n            break;\r\n            case 1:\r\n                this.setState({\r\n                    timeFromTo:\"10-10:30 AM\"\r\n    \r\n                })\r\n                break;\r\n                case 1:\r\n                    this.setState({\r\n                        timeFromTo:\"10-10:30 AM\"\r\n        \r\n                    })\r\n                    break;\r\n                    case 2:\r\n                        this.setState({\r\n                            timeFromTo:\"10:30-11 AM\"\r\n            \r\n                        })\r\n                        break;\r\n                        case 3:\r\n                            this.setState({\r\n                                timeFromTo:\"11-11:30 AM\"\r\n                \r\n                            })\r\n                            break;\r\n                            case 4:\r\n                                this.setState({\r\n                                    timeFromTo:\"11:30-12 PM\"\r\n                    \r\n                                })\r\n                                break;\r\n                                case 5:\r\n                                    this.setState({\r\n                                        timeFromTo:\"12-12:30 PM\"\r\n                        \r\n                                    })\r\n                                    break;\r\n                                    case 6:\r\n                                        this.setState({\r\n                                            timeFromTo:\"12:30-1 PM\"\r\n                            \r\n                                        })\r\n                                        break;\r\n                                        case 7:\r\n                                            this.setState({\r\n                                                timeFromTo:\"3-3:30 PM\"\r\n                                \r\n                                            })\r\n                                            break;\r\n                                            case 8:\r\n                                                this.setState({\r\n                                                    timeFromTo:\"3:30-4 PM\"\r\n                                    \r\n                                                })\r\n                                                break;\r\n                                                case 9:\r\n                                                    this.setState({\r\n                                                        timeFromTo:\"4-4:30 PM\"\r\n                                        \r\n                                                    })\r\n                                                    break;\r\n                                                    case 10:\r\n                                                        this.setState({\r\n                                                            timeFromTo:\"4:30-5 PM\"\r\n                                            \r\n                                                        })\r\n                                                        break;\r\n                                                       default:\r\n                                                           break;\r\n\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nrender(){\r\n\r\n\r\n    if(this.state.timeFromTo){\r\n        return(\r\n            <>\r\n            {this.state.timeFromTo}\r\n            </>\r\n        )\r\n    }else{\r\n        return(\r\n            <>\r\n            <p>none</p>\r\n            </>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\n}","export class Status{\r\n    statusId:number;\r\n    statusName:string;\r\n\r\n\r\n    constructor(statusId:number,statusName:string){\r\n        this.statusId=statusId;\r\n        this.statusName=statusName;\r\n\r\n\r\n\r\n    }\r\n}","\r\n\r\nexport class Type {\r\n\r\ntypeId:number;\r\ntypeName:string;\r\n\r\nconstructor(typeId:number,typeName:string){\r\n    this.typeId=typeId;\r\n    this.typeName=typeName;\r\n\r\n}\r\n\r\n\r\n}","\r\nimport React from \"react\";\r\nimport { Modal, Button, Form, FormGroup, Label, Input } from \"reactstrap\";\r\nimport { Doctor } from \"../../models/doctor\";\r\nimport { IState } from \"../../redux/reducers\";\r\nimport { loginSavePatient,loginSaveDoctor} from \"../../redux/action-mappers\";\r\nimport { connect } from \"react-redux\";\r\nimport { ChangeTimeSlotComponent } from \"./changeTimeSlot\";\r\nimport { Status } from \"../../models/appointmentstatus\";\r\nimport { Type } from \"../../models/appointmentType\";\r\nimport { saveAppointment } from \"../../api/apipatient\";\r\n\r\ninterface IProps{\r\n    onDisplay:any,\r\n    changeModal:any,\r\n    doctor1:any,\r\n    timeslot:number,\r\n    dateslot:any,\r\n    patient?:any\r\n    \r\n}\r\n\r\n\r\ninterface IModalState{\r\ndetails:any,\r\ntype:any\r\n\r\n\r\n}\r\nexport class AppointmentModalComponent extends React.Component<IProps,IModalState>{\r\n\r\nconstructor(props:IProps){\r\n    super(props)\r\n    this.state={\r\n        details:\"\",\r\n        type:1\r\n    }\r\n}\r\n\r\nchangeModal=()=>{\r\n    this.props.changeModal();\r\n}\r\n\r\n\r\nonChangesDetails=(e:any)=>{\r\n \r\n    let value = e.target.value;\r\n    this.setState({\r\n        details:value\r\n    })\r\n\r\n}\r\n\r\nonChangesType=(e:any)=>{\r\n \r\n    let value = e.target.value;\r\n    this.setState({\r\n        type:value\r\n    })\r\n\r\n}\r\n\r\nonSubmits=async(event:any)=>{\r\nevent.preventDefault();\r\nlet details=this.state.details;\r\n\r\nlet dateSlot=this.props.dateslot;\r\nconsole.log(dateSlot);\r\nlet timeSlot=this.props.timeslot;\r\nlet doctor=this.props.doctor1;\r\nlet patient=this.props.patient;\r\nlet status=new Status(1,\"scheduled\");\r\nlet typename=this.changeType();\r\nlet type=new Type(this.state.type,typename);\r\ntry{\r\nlet response=await saveAppointment(details,dateSlot,timeSlot,doctor,patient,status,type);\r\nconsole.log(response);\r\n}catch(e){\r\nconsole.log(e);\r\n}\r\n\r\n\r\n\r\n\r\n}\r\n\r\nchangeType=():string=>{\r\n    let typeInt=this.state.type;\r\n    let typename=\"\";\r\n    switch(typeInt){\r\n        case 1:\r\n            typename=\"routine visit\"\r\n            break;\r\n            case 2:\r\n                typename=\"office visit\"\r\n                break;\r\n                case 3:\r\n                    typename=\"return visit\"\r\n                    break;\r\n                    default:\r\n                        break;\r\n    }\r\n    return typename;\r\n\r\n}\r\n\r\n\r\n    render(){\r\n        return(\r\n<Modal isOpen={this.props.onDisplay}  >\r\n\r\n<Form onSubmit={this.onSubmits}>\r\n<FormGroup>\r\n<Label>Details</Label>\r\n<Input type=\"text\" name=\"details\" value={this.state.details} onChange={this.onChangesDetails} required />\r\n\r\n</FormGroup>\r\n<FormGroup>\r\n<Label>Date:</Label>\r\n<Input type=\"text\" value={this.props.dateslot||\"\"} disabled/>\r\n</FormGroup>\r\n<FormGroup>\r\n<Label>Time:</Label>\r\n<Input value={this.props.timeslot||\"\"} type=\"number\" disabled/>\r\n</FormGroup>\r\n<FormGroup>\r\n<Input type=\"select\" value={this.state.type} onChange={this.onChangesType} required>\r\n<option value=\"1\">Routine Visit</option>\r\n<option value=\"2\">Office Visit</option>\r\n<option value=\"3\">Return Visit</option>\r\n</Input>\r\n\r\n\r\n</FormGroup>\r\n<Button type=\"submit\">Confirm</Button>\r\n\r\n\r\n\r\n\r\n\r\n</Form>\r\n\r\n  <Button onClick={this.changeModal}>Cancel</Button>  \r\n</Modal>\r\n\r\n\r\n\r\n\r\n        )\r\n\r\n\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: IState) => {\r\n \r\n    return {\r\n      ...state.loginUser\r\n    }\r\n  \r\n  }\r\n  \r\n  const mapDispatchToProps = {\r\nloginSavePatient,\r\nloginSaveDoctor\r\n\r\n  \r\n  \r\n  }\r\n  \r\n  \r\n  export let AppointmentModalComponentS = connect(mapStateToProps, mapDispatchToProps)(AppointmentModalComponent);","import React from \"react\";\r\nimport { Doctor } from \"../../models/doctor\";\r\nimport { Appointment } from \"../../models/appointment\";\r\nimport { Table, Button, Modal, Form } from \"reactstrap\";\r\nimport { ChangeTimeSlotComponent } from \"./changeTimeSlot\";\r\nimport { AppointmentModalComponent, AppointmentModalComponentS } from \"./appointmentForm\";\r\n\r\n\r\n\r\n\r\ninterface IMakeState {\r\n    tomorrow: any,\r\n    dayAfterT: any,\r\n    tomorrowDate: any,\r\n    dayAfterDate: any,\r\n    modal: boolean,\r\n    timeslot: any,\r\n    dateslot: any\r\n\r\n}\r\n\r\ninterface IMakeProp {\r\n    doctor: Doctor;\r\n\r\n}\r\n\r\nexport class EXpNewAppointmentComponent extends React.Component<IMakeProp, IMakeState>{\r\n    constructor(props: IMakeProp) {\r\n        super(props);\r\n        this.state = {\r\n            tomorrow: null,\r\n            dayAfterT: null,\r\n            tomorrowDate: null,\r\n            dayAfterDate: null,\r\n            modal: false,\r\n            timeslot: null,\r\n            dateslot: null\r\n\r\n        }\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.makeApointments();\r\n    }\r\n\r\n\r\n    makeApointments = () => {\r\n        let tomorrowO: any =[1,2,3,4,5,6,7,8,9,10];\r\n        let dayAfterTO: any = [1,2,3,4,5,6,7,8,9,10];\r\n        let tomorrow1 = new Date();\r\n       \r\n        let tomorrowutc =  Date.UTC(tomorrow1.getUTCFullYear(), tomorrow1.getUTCMonth(),tomorrow1.getUTCDate(),\r\n        tomorrow1.getUTCHours(), tomorrow1.getUTCMinutes(), tomorrow1.getUTCSeconds());\r\n        tomorrow1=new Date(tomorrowutc);\r\n  tomorrow1.setDate(new Date().getDate() + 1);\r\n       \r\nlet tomorrow=tomorrow1.toISOString().slice(0,10);\r\n\r\n\r\n\r\n\r\n        let dayafterT1 = new Date();\r\n        let dayafterutc =  Date.UTC(dayafterT1.getUTCFullYear(), dayafterT1.getUTCMonth(),dayafterT1.getUTCDate(),\r\n        dayafterT1.getUTCHours(), dayafterT1.getUTCMinutes(), dayafterT1.getUTCSeconds());\r\n        dayafterT1=new Date(dayafterutc);\r\n\r\n\r\n        dayafterT1.setDate(new Date().getDate() + 2);\r\n        let dayafterT = dayafterT1.toISOString().slice(0, 10);\r\n        console.log(tomorrow);\r\n        console.log(dayafterT);\r\n\r\n\r\n        let appointments: any[] | undefined = this.props.doctor.appointments;\r\n        let today1 = new Date();\r\n        let todayutc =  Date.UTC(dayafterT1.getUTCFullYear(), today1.getUTCMonth(),today1.getUTCDate(),\r\n        today1.getUTCHours(), today1.getUTCMinutes(), today1.getUTCSeconds());\r\n        today1=new Date(today1);\r\n       let  today=today1.toISOString().slice(0,10);\r\n       \r\n       \r\n       \r\n       \r\n       \r\n       \r\n       \r\n       \r\n       \r\n        console.log(today);\r\n\r\n        if (appointments) {\r\n            let newappoint = appointments.map((appointment: Appointment) => {\r\n\r\n\r\n                let stringDate = appointment.dateSlot.toString();\r\n\r\n                let parts = stringDate.split('-');\r\n//already stored in utc\r\n                let dates1 = new Date(Number(parts[0]), Number(parts[1]) - 1, Number(parts[2]));\r\n                // console.log(dates1.toISOString().slice(0,10));\r\n\r\n                let appointdate = dates1.toISOString().slice(0, 10);\r\n                console.log(appointdate);\r\n                console.log(appointdate === today);\r\n                let OnTimeSlot = appointment.timeSlot;\r\n                console.log(appointdate > today);\r\n                if (appointdate > today) {\r\n\r\n                    if (appointdate === tomorrow) {\r\n                    \r\n                      \r\n                        tomorrowO=tomorrowO.filter((elem:any)=>{\r\n                            return elem!=OnTimeSlot;\r\n\r\n                        })\r\n\r\n\r\n                      \r\n\r\n\r\n                    }\r\n\r\n\r\n                    if (appointdate === dayafterT) {\r\n                        // dayAfterTO = [];\r\n\r\n                      \r\n                            dayAfterTO=dayAfterTO.filter((elem:any)=>{\r\n                                return elem!=OnTimeSlot;\r\n                            })\r\n\r\n\r\n                        \r\n\r\n\r\n                    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n                }\r\n\r\n\r\n\r\n            })\r\n\r\n        }\r\n\r\n        console.log(tomorrowO);\r\n        console.log(dayAfterTO);\r\n        this.setState({\r\n            tomorrow: tomorrowO,\r\n            dayAfterT: dayAfterTO,\r\n            tomorrowDate: tomorrow,\r\n            dayAfterDate: dayafterT\r\n\r\n\r\n        })\r\n\r\n    }\r\n\r\n\r\n\r\n    changeModal = (event: any) => {\r\n        this.setState({\r\n            modal: !this.state.modal\r\n        })\r\n\r\n    }\r\n\r\n    onClicks = (event: any) => {\r\n        let timeSlot = event.target.id; //integer\r\n        let date = event.target.value;\r\n        console.log(`date ${date}`);\r\n        this.setState({\r\n            timeslot: timeSlot,\r\n            dateslot: date,\r\n            modal: !this.state.modal\r\n        })\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    render() {\r\n\r\n\r\n        if (this.state.tomorrow && this.state.dayAfterT) {\r\n            return (\r\n                <>\r\n                    <Table>\r\n                        <tbody>\r\n                            <tr>\r\n                                <th>{this.state.tomorrowDate}</th>\r\n                                {this.state.tomorrow.map((slots: any) => {\r\n\r\n                                    return (\r\n                                        <td key={slots}>\r\n                                            <Button id={slots} onClick={this.onClicks} value={this.state.tomorrowDate}><ChangeTimeSlotComponent timeSlot={slots} /></Button>\r\n\r\n\r\n                                        </td>\r\n                                    )\r\n                                })}\r\n\r\n\r\n\r\n\r\n                            </tr>\r\n                            <tr>\r\n                                <th>{this.state.dayAfterDate}</th>\r\n                                {this.state.dayAfterT.map((slots: any) => {\r\n\r\n                                    return (\r\n                                        <td key={slots}>\r\n                                            <Button id={slots} onClick={this.onClicks} value={this.state.dayAfterDate}><ChangeTimeSlotComponent timeSlot={slots} /></Button>\r\n\r\n\r\n                                        </td>\r\n                                    )\r\n                                })}\r\n\r\n\r\n                            </tr>\r\n\r\n\r\n                        </tbody>\r\n\r\n\r\n\r\n                    </Table>\r\n\r\n\r\n\r\n                    <AppointmentModalComponentS onDisplay={this.state.modal} changeModal={this.changeModal} doctor1={this.props.doctor} timeslot={this.state.timeslot} dateslot={this.state.dateslot} />\r\n\r\n\r\n\r\n\r\n\r\n                </>\r\n            )\r\n\r\n\r\n\r\n\r\n        } else {\r\n            return (\r\n                <p>Not</p>\r\n            )\r\n        }\r\n\r\n    }\r\n\r\n}","\r\n\r\nimport React from \"react\";\r\nimport { Doctor } from \"../../models/doctor\";\r\nimport { Card, ListGroup, CardBody, ListGroupItem, Button, Collapse } from \"reactstrap\";\r\nimport { MakeNewAppointmentComponent } from \"./makenewAppointment\";\r\nimport { EXpNewAppointmentComponent } from \"./ExpNewAppointment\";\r\n\r\ninterface IDoctor{\r\ndoctor:Doctor\r\n}\r\n\r\n\r\n\r\n\r\nexport class DisplayDoctorComponent extends React.Component<IDoctor,any>{\r\n\r\n    constructor(props:any){\r\n        super(props)\r\n\r\n        this.state={\r\n            isOpen:false\r\n        }\r\n    }\r\n\r\n    toggle=()=>{\r\n        let isOpen=this.state.isOpen\r\nthis.setState({\r\n    isOpen:!isOpen\r\n})\r\n\r\n    }\r\n\r\n\r\n\r\n    render(){\r\n\r\n\r\nreturn(\r\n    <div key={this.props.doctor.doctorId}>\r\n    <Card>\r\n        <CardBody>\r\n<ListGroup>\r\n<ListGroupItem>\r\nName: {this.props.doctor.firstName} {this.props.doctor.lastName}\r\n</ListGroupItem>\r\n<ListGroupItem>\r\nSpeciality: {this.props.doctor.speciality}\r\n</ListGroupItem>\r\n\r\n\r\n\r\n</ListGroup>\r\n\r\n\r\n\r\n<Button className=\" mt-1\" onClick={this.toggle} >Make an Appointment</Button>\r\n\r\n<Collapse isOpen={this.state.isOpen}>\r\n<div>\r\n<EXpNewAppointmentComponent   doctor={this.props.doctor}/>\r\n{/* <MakeNewAppointmentComponent doctor={this.props.doctor}/> */}\r\n\r\n\r\n\r\n</div>\r\n\r\n\r\n\r\n</Collapse>\r\n\r\n\r\n        </CardBody>\r\n       \r\n        \r\n        \r\n        </Card> \r\n\r\n\r\n\r\n\r\n </div>\r\n\r\n\r\n\r\n\r\n\r\n)\r\n\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}","\r\nimport React from \"react\";\r\nimport { departmentDoctors } from \"../../api/apipatient\";\r\nimport { Doctor } from \"../../models/doctor\";\r\nimport { Card, CardBody, ListGroup, ListGroupItem, Button, Modal, ModalBody, Collapse } from \"reactstrap\";\r\nimport { DisplayDoctorComponent } from \"./displaydoctorappointment\";\r\n\r\n\r\ninterface IDepartment{\r\n    doctors:Doctor[]|null;\r\n}\r\n\r\nexport class DepartmentDoctorsComponent extends React.Component<any,IDepartment>{\r\n\r\nconstructor(props:any){\r\n    super(props);\r\n    this.state={\r\n        doctors:null\r\n    }\r\n}\r\n\r\ncomponentDidMount=async()=>{\r\nconsole.log(this.props.departmentid)\r\ntry{\r\n   let doctors=await departmentDoctors(this.props.departmentid);\r\n   console.log(doctors);\r\n   this.setState({\r\n       doctors:doctors\r\n   })\r\n\r\n}catch(e){\r\n    console.log(e)\r\n\r\n}\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nrender(){\r\n  if(this.state.doctors){\r\n      return(\r\n<>\r\n      <h2>{this.state.doctors[0].department.departmentName.toUpperCase()}</h2>\r\n      \r\n      {this.state.doctors.map((doctor:Doctor)=>{\r\n\r\n\r\n\r\n\r\nreturn(\r\n\r\n    <DisplayDoctorComponent key={doctor.doctorId} doctor={doctor}/>\r\n\r\n\r\n\r\n\r\n\r\n\r\n     ) })}\r\n\r\n\r\n \r\n\r\n</>\r\n\r\n\r\n\r\n\r\n      )\r\n\r\n\r\n\r\n\r\n\r\n  }else{\r\n      return(\r\n          <p>Hello</p>\r\n      )\r\n  }\r\n\r\n    \r\n}\r\n\r\n\r\n}","\r\n\r\nimport React from \"react\";\r\nimport { Container, Row, Col, NavItem } from \"reactstrap\";\r\nimport { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { DepartmentDoctorsComponent } from \"./departmentDoctors\";\r\nexport class NewAppointmentComponent extends React.Component<any,any>{\r\n\r\n\r\nrender(){\r\n//will have all the departmetns listed  and when we click on it redirects will list all the   1 and 11\r\n\r\n    return(\r\n\r\n        <Container fluid>\r\n        <Row>\r\n            <Router>\r\n                <Col sm=\"2\" >\r\n\r\n                  \r\n                        <nav className=\"navbar bg-light\">\r\n                        <ul className=\"navbar-nav\">\r\n                            <h2>Departments</h2>\r\n                            <NavItem>\r\n                                <NavLink to=\"/patient/newappointment/cardiology\" className=\"nav-link \" activeClassName=\"active\">Cardiology</NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink to=\"/patient/newappointment/neurology\" className=\"nav-link \" activeClassName=\"active\">Neurology</NavLink>\r\n                            </NavItem>\r\n                            <NavItem>\r\n                                <NavLink to=\"/patient/newappointment/urology\" className=\"nav-link \" activeClassName=\"active\">urology</NavLink>\r\n                            </NavItem>\r\n                            </ul>\r\n                            </nav>\r\n                     \r\n                    {/* this componets mus thave an update method */}\r\n\r\n                </Col>\r\n                <Col sm=\"10\">\r\n\r\n                    <Switch>\r\n                        {/* <Route path=\"/patient/newappointment/cardiology\"> */}\r\n\r\n                    <Route path=\"/patient/newappointment/cardiology\" render={(props)=>{return<DepartmentDoctorsComponent departmentid={1} {...props}/>}}/>\r\n                        {/* </Route> */}\r\n                        <Route path=\"/patient/newappointment/neurology\">\r\n                        joel\r\n                        </Route>\r\n                        <Route path=\"/patient/newappointment/urology\">\r\n                        blah\r\n                        </Route>\r\n\r\n\r\n\r\n                    </Switch>\r\n\r\n\r\n\r\n                </Col>\r\n            </Router>\r\n        </Row>\r\n    </Container>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n    )\r\n}\r\n\r\n\r\n}","import React from \"react\";\r\n\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport { PatientNavigationComponent, PatientNavigationComponentSW } from \"./patientNavigation\";\r\nimport { PatientAppointmentComponent, PatientAppointmentComponentW } from \"./patientAppointment\";\r\nimport { NewAppointmentComponent } from \"./newAppointment\";\r\n\r\n\r\n\r\nexport class PatientHomeComponent extends React.Component<any,any>{\r\n\r\n\r\n    render(){\r\n\r\nreturn(\r\n    \r\n\r\n    <>\r\n    <p>PateintHome</p>\r\n\r\n    <Router>\r\n        <PatientNavigationComponentSW/>\r\n        <Switch>\r\n            <Route path=\"/patient/appointments\"> \r\n           <PatientAppointmentComponentW/>\r\n            </Route>\r\n            <Route path=\"/patient/newappointment\">    \r\n<NewAppointmentComponent/>\r\n            </Route>\r\n\r\n\r\n            <Route path=\"*\">\r\npatient card\r\n            </Route>\r\n\r\n\r\n\r\n\r\n        </Switch>\r\n\r\n\r\n\r\n\r\n    </Router>\r\n\r\n\r\n\r\n\r\n\r\n    </>\r\n      \r\n)\r\n        \r\n    }\r\n\r\n\r\n}","import { loginSaveDoctor, loginSavePatient } from \"../redux/action-mappers\";\r\nimport { store } from \"../redux/store\";\r\nimport { project2 } from \"./apipatient\";\r\nimport { Doctor } from \"../models/doctor\";\r\nimport { Patient } from \"../models/patient\";\r\n\r\n\r\nexport let x=5;\r\n\r\n\r\nexport const loginDoctor=async(un:string,pas:string)=>{\r\n    try{\r\n        let response=await project2.post(\"/doctors/login\",{username:un,password:pas});\r\n        const{doctorId,firstName,lastName,speciality,username,password,department}=response.data;\r\n\r\n        let doctor=new Doctor(doctorId,firstName,lastName,speciality,username,password,department);\r\n        store.dispatch(loginSaveDoctor(doctor));\r\n        store.dispatch(loginSavePatient(new  Patient(0,\"\",\"\",\"\",\"\",\"\",0,\"\",\"\",\"\")));\r\n        return response;\r\n        }\r\n        catch(e){\r\n            throw e;\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n}","import React from 'react';\r\nimport { Button, Container, Row, Col } from \"reactstrap\";\r\n\r\nimport { withRouter } from 'react-router-dom'\r\nimport { loginDoctor } from '../../api/apidoctor';\r\n\r\n\r\nexport class DoctorLoginComponent extends React.Component<any,any>{\r\n\r\nconstructor(props:any){\r\n    super(props);\r\n    this.state={\r\n        username:\"\",\r\n        password:\"\"\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nverifyUser=async(event:any)=>{\r\n    event.preventDefault();\r\n   \r\n    try{\r\nlet doctor =await loginDoctor(this.state.username,this.state.password);\r\nconsole.log(doctor);\r\nthis.props.history.push(\"/doctor/home\");\r\n\r\n\r\n    }catch(e){\r\n        // toast(\"invalid credentials\", { type: \"error\" });\r\n        console.log(e);\r\n\r\n    }\r\n    // this.props.history.push(\"/doctor/home\");\r\n\r\n\r\n}\r\n\r\nsetUsername=(event:any)=>{\r\n    let username = event.target.value;\r\n    this.setState({\r\n        username: username\r\n    })\r\n\r\n\r\n}\r\n\r\nsetPassword=(event:any)=>{\r\n    let password = event.target.value;\r\n    this.setState({\r\n        password: password\r\n    })\r\n\r\n}\r\n\r\n\r\n\r\n\r\n    render(){\r\n\r\n\r\n        return(\r\n            <div className=\"row align-items-center justify-content-center \" style={{ height: \"80%\" }}  >\r\n            <div className=\"login-column\">\r\n            <form onSubmit={this.verifyUser} className=\"form-signin \" >\r\n                <h2 > Please Sign In</h2>\r\n                <br/>\r\n                <div className=\"form-group\">\r\n                    <label><span className=\"font-weight-bold\">UserName:</span><input type=\"text\" className=\"form-control\" value={this.state.username} onChange={this.setUsername} required /></label>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label><span className=\"font-weight-bold\">Password:</span><input type=\"password\" className=\"form-control\" value={this.state.password} onChange={this.setPassword} required /></label>\r\n                </div>\r\n                {/* <button className=\"btn btn-primary\" type=\"submit\">Login</button> */}\r\n                <Button color=\"primary\" className=\"btn-block\">Login</Button>\r\n            </form>\r\n            </div>\r\n            </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n        )\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n\r\nexport const DoctorLoginComponentR=withRouter(DoctorLoginComponent);","\r\nimport React from \"react\";\r\n\r\n\r\n\r\n\r\nexport class DoctorAppointmentComponent extends React.Component<any,any>{\r\n\r\n\r\nrender(){\r\n\r\nreturn(\r\n\r\n\r\n<p>Hellos here will be all the appointments related to him sorted by date</p>\r\n\r\n\r\n)\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n","import React from \"react\";\r\nimport { Navbar, Nav, NavbarBrand, NavItem, Button } from \"reactstrap\";\r\n\r\nimport { NavLink, withRouter } from 'react-router-dom';\r\nimport { IState } from \"../../redux/reducers\";\r\nimport { loginSaveDoctor,loginSavePatient } from \"../../redux/action-mappers\";\r\nimport { connect } from \"react-redux\";\r\n\r\n\r\n\r\nexport class DoctorNavigationComponent extends React.Component<any,any>{\r\n\r\n\r\n\r\n    logoutUser = (e: any) => {\r\n   \r\n        // console.log(this.props.location.pathname)\r\n        this.props.loginSaveDoctor(null);\r\n        this.props.loginSavePatient(null);\r\n        this.props.history.push(\"/home\");\r\n    \r\n    \r\n      }\r\n\r\n\r\n\r\n    render(){\r\n\r\nreturn(\r\n\r\n\r\n<>\r\n    <Navbar  color=\"light\" light expand=\"md\">\r\n\r\n    <Nav  tabs className=\"w-100\">\r\n    <NavbarBrand>\r\n                  \r\n               \r\n              </NavbarBrand>\r\n      <NavItem>\r\n        <NavLink  to=\"/doctor/appointments\" className=\"nav-link\" activeClassName=\"active\">View Appointments</NavLink>\r\n      </NavItem>\r\n      <NavItem>\r\n        <NavLink  to=\"\" className=\"nav-link\" activeClassName=\"active\">New Appointment Later</NavLink>\r\n      </NavItem>\r\n      <NavItem className=\"float-right\" tag={() => { return <Button className=\"float-right\" onClick={this.logoutUser} color=\"primary\" outline>Logout</Button> }} />\r\n    \r\n    \r\n\r\n\r\n    </Nav>\r\n    \r\n  </Navbar>\r\n  </>\r\n\r\n)\r\n\r\n    }\r\n\r\n\r\n\r\n    \r\n}\r\n\r\n\r\nconst mapStateToProps = (state: IState) => {\r\n \r\n    return {\r\n      ...state.loginUser\r\n    }\r\n  \r\n  }\r\n  \r\n  const mapDispatchToProps = {\r\nloginSaveDoctor,\r\nloginSavePatient\r\n  \r\n  \r\n  }\r\n  \r\n  \r\n  export let DoctorNavigationComponentS = connect(mapStateToProps, mapDispatchToProps)(DoctorNavigationComponent);\r\n  export let DoctorNavigationComponentSW=withRouter(DoctorNavigationComponentS);","\r\n\r\n\r\n\r\nimport React from \"react\";\r\n\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport { DoctorAppointmentComponent } from \"./doctorAppointments\";\r\nimport { DoctorNavigationComponent, DoctorNavigationComponentS, DoctorNavigationComponentSW } from \"./doctorNavigation\";\r\nimport { store } from \"../../redux/store\";\r\nimport { Provider } from \"react-redux\";\r\nimport { DoctorLoginComponentR } from \"./doctorlogin\";\r\n\r\n\r\n\r\n\r\nexport class DoctorHomeComponent extends React.Component<any,any>{\r\n\r\n\r\n    render(){\r\n\r\nreturn(\r\n    \r\n\r\n    <>\r\n    <p>DoctorHome</p>\r\n<Provider store={store}>\r\n    \r\n    <Router>\r\n    <DoctorNavigationComponentSW/>\r\n        <Switch>\r\n            <Route path=\"/doctor/appointments\"> \r\n        <DoctorAppointmentComponent/>\r\n            </Route>\r\n            <Route path=\"/patient/newappointment\">    \r\n\r\n            </Route>\r\n\r\n\r\n            <Route path=\"*\">\r\npatient card\r\n            </Route>\r\n\r\n\r\n\r\n\r\n        </Switch>\r\n\r\n\r\n\r\n\r\n    </Router>\r\n\r\n\r\n\r\n    </Provider>\r\n\r\n    </>\r\n      \r\n)\r\n        \r\n    }\r\n\r\n\r\n}","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\r\nimport { HomePageComponent } from './components/homepage';\r\nimport { PatientLoginComponentR, PatientLoginComponent } from './components/patients/patientLogin';\r\nimport { HomeNavigationComponent } from './components/HomeNavigation';\r\nimport { PatientHomeComponent } from './components/patients/patienthome';\r\nimport { DoctorLoginComponent, DoctorLoginComponentR } from './components/doctor/doctorlogin';\r\nimport { DoctorHomeComponent } from './components/doctor/doctorHome';\r\nimport { Provider, connect } from 'react-redux';\r\nimport { store } from './redux/store';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport { IState } from './redux/reducers';\r\nimport { loginSaveDoctor, loginSavePatient } from \"./redux/action-mappers\";\r\nimport { render } from '@testing-library/react';\r\nimport { Doctor } from './models/doctor';\r\nimport { Patient } from './models/patient';\r\nimport { Department } from './models/department';\r\n\r\n\r\nexport class App extends React.Component<any,any> {\r\n\r\n  constructor(props:any){\r\n\r\n    super(props);\r\n     this.state={\r\n       doctor:null,\r\n     patient:null\r\n     }\r\n  }\r\n\r\n\r\n  \r\n   \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  render() {\r\n\r\nif(this.props.doctor===null&&this.props.patient===null){\r\n  return(\r\n    <Router>\r\n    <Switch>\r\n    <Route path=\"/patientlogin\">\r\n      <PatientLoginComponentR/>\r\n    </Route>\r\n    <Route path=\"/doctorlogin\">\r\n      <DoctorLoginComponentR/>\r\n    </Route>\r\n    \r\n{/*     \r\n    <Route path=\"/patient/home\">\r\n    <PatientHomeComponent/>\r\n    </Route>\r\n    \r\n    <Route path=\"/doctor/home\">\r\n    <DoctorHomeComponent/>\r\n    </Route> */}\r\n    \r\n    <Route path={[\"/home\",\"*\"]}>\r\n    <HomeNavigationComponent/>\r\n    <HomePageComponent/>\r\n    </Route>\r\n    \r\n    \r\n    \r\n    \r\n    </Switch>\r\n    \r\n    \r\n    \r\n        </Router>\r\n\r\n\r\n\r\n\r\n\r\n\r\n  )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n    \r\n    return(\r\n\r\n\r\n  <>\r\n\r\n    <Router>\r\n<Switch>\r\n<Route path=\"/patientlogin\">\r\n  <PatientLoginComponentR/>\r\n</Route>\r\n<Route path=\"/doctorlogin\">\r\n  <DoctorLoginComponentR/>\r\n</Route>\r\n\r\n\r\n<Route path=\"/patient/home\">\r\n<PatientHomeComponent/>\r\n</Route>\r\n\r\n<Route path=\"/doctor/home\">\r\n<DoctorHomeComponent/>\r\n</Route>\r\n\r\n<Route path={[\"/home\",\"*\"]}>\r\n<HomeNavigationComponent/>\r\n<HomePageComponent/>\r\n</Route>\r\n\r\n\r\n\r\n\r\n</Switch>\r\n\r\n\r\n\r\n    </Router>\r\n  \r\n  \r\n    <ToastContainer />\r\n  \r\n\r\n</>\r\n\r\n\r\n\r\n\r\n)\r\n// }\r\n};\r\n  \r\n}\r\n\r\nexport default App;\r\n\r\n\r\nconst mapStateToProps = (state: IState) => {\r\n \r\n  return {\r\n    ...state.loginUser\r\n  }\r\n\r\n}\r\n\r\nconst mapDispatchToProps = {\r\nloginSaveDoctor,\r\nloginSavePatient\r\n\r\n\r\n}\r\n\r\n\r\nexport let AppS = connect(mapStateToProps, mapDispatchToProps)(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App, { AppS } from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './redux/store';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n    <AppS />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}