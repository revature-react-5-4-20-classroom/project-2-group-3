{"version":3,"sources":["components/homepage.tsx","models/patient.ts","models/doctor.ts","models/department.ts","redux/action-mappers.ts","redux/reducers.ts","redux/store.ts","api/apipatient.ts","components/patients/patientLogin.tsx","components/HomeNavigation.tsx","components/patients/patientNavigation.tsx","components/patients/changeTimeSlot.tsx","components/patients/displaypatientAppointment.tsx","components/patients/patientAppointment.tsx","models/appointmentstatus.ts","models/appointmentType.ts","components/patients/appointmentForm.tsx","components/patients/makenewAppointment.tsx","components/patients/times.ts","components/patients/displaydoctorappointment.tsx","components/patients/departmentDoctors.tsx","components/patients/newAppointment.tsx","components/patients/recordpatient.tsx","components/patients/patientCard.tsx","components/patients/emergencyModal.tsx","components/patients/emergency.tsx","components/patients/patienthome.tsx","api/apidoctor.ts","components/doctor/doctorlogin.tsx","components/doctor/doctorAppointments.tsx","components/doctor/doctorNavigation.tsx","components/doctor/doctorHome.tsx","components/patients/createAccount.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["HomePageComponent","React","Component","Patient","patientId","firstName","lastName","gender","username","password","birthDate","address","phone","email","lastRecord","this","Doctor","doctorId","speciality","department","appointments","Department","id","doctor","departmentName","loginTypes","loginSavePatient","patient","type","playload","loginSaveDoctor","defaultUser","state","combineReducers","loginUser","action","enhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","applyMiddleware","thunk","store","createStore","project2","axios","create","baseURL","loginpatient","un","pas","a","post","response","data","dispatch","patientAllAppointment","get","Error","departmentDoctors","doctors","saveAppointment","det","dateS","timeS","doct","pat","stat","ty","console","log","details","dateSlot","timeSlot","status","appointment","createPatient","firstN","lastN","birthD","add","physicalRecord","getEmergency","saveEmergency","name","relation","PatientLoginComponent","props","verifyUser","event","preventDefault","history","push","setUsername","target","value","setState","setPassword","className","style","height","onSubmit","onChange","required","Button","color","PatientLoginComponentR","withRouter","HomeNavigationComponent","Navbar","light","expand","Nav","tabs","NavbarBrand","NavItem","to","activeClassName","PatientNavigationComponent","logoutUser","e","tag","onClick","outline","mapDispatchToProps","PatientNavigationComponentS","connect","PatientNavigationComponentSW","ChangeTimeSlotComponent","componentDidMount","changeView","timeFromTo","DisplayPatientAppointmentComponent","appoint","map","elem","key","appointmentId","Card","CardBody","ListGroup","ListGroupItem","statusName","typeName","PatientAppointmentComponent","Container","Row","Col","PatientAppointmentComponentW","Status","statusId","Type","typeId","AppointmentModalComponent","timeslot","time","componentDidUpdate","prevProps","changeModal","onChangesDetails","onChangesType","onSubmits","dateslot","doctor1","typename","changeType","Modal","isOpen","onDisplay","Form","FormGroup","Label","Input","disabled","AppointmentModalComponentR","AppointmentModalComponentS","MakeNewAppointmentComponent","makeApointments","tomorrowO","dayAfterTO","dayAfterT3O","date1","Date","dateutc","UTC","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCDay","tomorrow1","dayafterT1","dayafterT31","setDate","getDate","toISOString","slice","times","tomorrow","dayafterT","dayafterT3","today","parts","toString","split","appointdate","Number","OnTimeSlot","filter","dayAfterT","tomorrowDate","dayAfterDate","dayAfter3O","dayAfter3Date","modal","onClicks","date","Table","size","slots","DisplayDoctorComponent","toggle","Collapse","DepartmentDoctorsComponent","changes","departmentid","toUpperCase","DepartmentDoctorsComponentR","NewAppointmentComponent","cardio","change","neuro","uro","fluid","sm","ButtonGroup","vertical","ButtonToggle","NewAppointmentComponentR","RecordPatientComponent","record","weight","age","diagnosis","prescribedAction","prescribedMedication","notes","RecordPatientComponentS","PatientCardComponent","CardHeader","PatientCardComponentS","NewEmergencyComponent","changepropmodal","ontoggle","onName","x","onAddress","onRelation","onPhone","EmergencyComponent","econtacts","econtact","i","EmergencyComponentS","PatientHomeComponent","path","loginDoctor","DoctorLoginComponent","DoctorLoginComponentR","DoctorAppointmentComponent","DoctorNavigationComponent","DoctorNavigationComponentS","DoctorNavigationComponentSW","DoctorHomeComponent","CreateAccountComponent","onfirstSubmits","onlastSumbits","ongenderSubmits","onusernameSubmits","onpasswordSubmits","ondateSubmits","onaddSubmits","onphoneSubmits","onemailSubmits","FormOnSUbmit","for","CreateAccountComponentW","App","AppS","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fc3033f7.chunk.js","sourcesContent":["\r\nimport React from 'react';\r\nimport { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\r\nimport { HomeNavigationComponent } from './HomeNavigation';\r\nimport { PatientLoginComponent, PatientLoginComponentR } from './patients/patientLogin';\r\n\r\n\r\nexport class HomePageComponent extends React.Component {\r\n\r\n\r\n    render(){\r\n        return(\r\n<>\r\n\r\n\r\n\r\n<Router>\r\n         {/* <HomeNavigationComponent/> */}\r\n{/* <Switch>\r\n<Route path=\"/patientlogin\">\r\n<PatientLoginComponentR/>\r\n</Route>\r\n\r\n<Route path=\"/doctorlogin\">\r\n\r\n</Route>\r\n\r\n\r\n</Switch> */}\r\n\r\n\r\n</Router>\r\n\r\n\r\n\r\n</>\r\n\r\n\r\n\r\n\r\n        )\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}","import { LastRecord } from \"./lastRecord\";\r\n\r\n\r\n\r\nexport interface IPatient {\r\n\r\npatientId:number,\r\nfirstName:string,\r\nlastName:string,\r\ngender:string,\r\nusername:string,\r\npassword:string,\r\nbirthDate:number,\r\naddress:string,\r\nphone:string,\r\nemail:string,\r\n\r\nlastRecord?:LastRecord\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\nexport class Patient implements IPatient{\r\n    patientId: number;\r\n    firstName: string;\r\n    lastName: string;\r\n    gender: string;\r\n    username: string;\r\n    password: string;\r\n    birthDate: number;\r\n    address: string;\r\n    phone: string;\r\n    email: string;\r\n    lastRecord?:LastRecord\r\n\r\n    constructor(patientId:number,firstName:string,lastName:string,gender:string,username:string,password:string,birthDate:number,address:string,phone:string,email:string,lastRecord?:LastRecord){\r\n\r\nthis.patientId=patientId;\r\nthis.firstName=firstName;\r\nthis.lastName=lastName;\r\nthis.gender=gender;\r\nthis.username=username;\r\nthis.password=password;\r\nthis.birthDate=birthDate;\r\nthis.address=address;\r\nthis.phone=phone;\r\nthis.email=email;\r\nthis.lastRecord=lastRecord;\r\n\r\n\r\n        \r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}","import { Department } from \"./department\";\r\nimport { Appointment } from \"./appointment\";\r\n\r\n\r\n\r\n\r\nexport interface IDoctor{\r\n\r\ndoctorId:number,\r\nfirstName:string,\r\nlastName:string,\r\nspeciality:string,\r\nusername:string,\r\npassword:string,\r\ndepartment:Department,\r\nappointments?:Appointment[]\r\n\r\n}\r\n\r\n\r\nexport class Doctor implements IDoctor{\r\n\r\n    doctorId:number;\r\n    firstName:string;\r\nlastName:string;\r\nspeciality:string;\r\nusername:string;\r\npassword:string;\r\ndepartment:Department;\r\nappointments?:Appointment[]\r\n\r\n\r\n\r\n\r\n\r\nconstructor(doctorId:number,firstName:string,lastName:string,speciality:string,username:string,password:string,department:Department,appointments?:Appointment[]){\r\n    this.doctorId=doctorId;\r\n    this.firstName=firstName;\r\n    this.lastName=lastName;\r\n    this.speciality=speciality;\r\n    this.username=username;\r\n    this.password=password;\r\n    this.department=department;\r\n    this.appointments=appointments\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}","import { Doctor } from \"./doctor\";\r\n\r\n\r\n\r\ninterface IDepartment{\r\n\r\nid:number;\r\ndepartmentName:string;\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\nexport class Department implements IDepartment{\r\n\r\nid:number;\r\ndepartmentName:string;\r\ndoctor?:Doctor;\r\n\r\n\r\nconstructor(id:number,department:string,doctor?:Doctor){\r\n\r\n    this.id=id;\r\n    this.departmentName=department;\r\n    this.doctor=doctor;\r\n\r\n}\r\n\r\n\r\n}","import { Patient } from \"../models/patient\"\r\nimport { Doctor } from \"../models/doctor\"\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const loginTypes={\r\n    LOGIN_PATIENT:\"REACT_LOGIN_PATIENT\",\r\n    LOGIN_DOCTOR:\"REACT_LOGIN_DOCTOR\"\r\n\r\n}\r\n\r\n\r\n\r\nexport const loginSavePatient=(patient:Patient)=>{\r\n\r\n    return{\r\n\r\ntype:loginTypes.LOGIN_PATIENT,\r\nplayload:{\r\n    patient\r\n}\r\n\r\n    }\r\n\r\n}\r\n\r\nexport const loginSaveDoctor=(doctor:Doctor)=>{\r\n\r\n    return{\r\n\r\ntype:loginTypes.LOGIN_DOCTOR,\r\nplayload:{\r\n    doctor\r\n}\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import { Patient } from \"../models/patient\";\r\nimport { Doctor } from \"../models/doctor\";\r\nimport { Department } from \"../models/department\";\r\nimport { AnyAction, combineReducers } from \"redux\";\r\nimport { loginTypes } from \"./action-mappers\";\r\nimport { LastRecord } from \"../models/lastRecord\";\r\n\r\ninterface IUser{\r\n    patient:Patient,\r\n    doctor:Doctor\r\n}\r\n\r\n\r\nconst defaultUser:IUser={\r\n    patient:new Patient(0,\"\",\"\",\"\",\"\",\"\",0,\"\",\"\",\"\"),\r\n    doctor:new Doctor(0,\"\",\"\",\"\",\"\",\"\",new Department(0,\"\"))\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport const loginReducer=(state:IUser=defaultUser,action:AnyAction)=>{\r\n    switch(action.type){\r\n\r\n        case loginTypes.LOGIN_PATIENT:{\r\n            \r\n            const patient=action.playload.patient;\r\n            return{\r\n                ...state,\r\n                patient:patient\r\n            }\r\n\r\n\r\n        }\r\n\r\n        case loginTypes.LOGIN_DOCTOR:{\r\n            const doctor=action.playload.doctor;\r\n            return {\r\n                ...state,\r\n                doctor:doctor\r\n            }\r\n\r\n        }\r\n\r\n        default:\r\n            return state\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\n\r\nexport interface IState{\r\n    loginUser:IUser\r\n}\r\n\r\nexport const state=combineReducers<IState>({\r\n    loginUser:loginReducer\r\n\r\n})\r\n\r\n","\r\nimport { compose, applyMiddleware, Store, createStore, combineReducers } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { state } from './reducers';\r\n\r\n\r\nconst composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\r\n\r\n\r\n\r\nconst enhancer = composeEnhancers(\r\n    applyMiddleware(thunk)\r\n  )\r\n  \r\n\r\n\r\n  export const store:Store<any>=createStore(\r\n      state,\r\n      enhancer\r\n  )\r\n  ","import axios from 'axios';\r\nimport { store } from '../redux/store';\r\nimport { Patient } from '../models/patient';\r\nimport { loginSavePatient, loginSaveDoctor } from '../redux/action-mappers';\r\nimport { Doctor } from '../models/doctor';\r\nimport { Department } from '../models/department';\r\nimport { Appointment } from '../models/appointment';\r\nimport { Status } from '../models/appointmentstatus';\r\nimport { Type } from '../models/appointmentType';\r\n\r\n\r\nexport const project2 = axios .create({\r\n    baseURL: 'http://localhost:8080/',\r\n\r\n    // baseURL: \"localhost:8080/\",\r\n    // If you don't have the following line, your login won't work!\r\n    // withCredentials: true,\r\n});\r\n\r\n\r\n\r\n//login patient\r\nexport const loginpatient=async(un:string,pas:string)=>{\r\ntry{\r\nlet response=await project2.post(\"/patients/login\",{username:un,password:pas});\r\nconst{patientId,lastRecord,firstName,lastName,gender,username,password,birthDate,address,phone,email}=response.data;\r\nlet patient=new Patient(patientId,firstName,lastName,gender,username,password,birthDate,address,phone,email,lastRecord);\r\nstore.dispatch(loginSavePatient(patient));\r\nstore.dispatch(loginSaveDoctor(new Doctor(0,\"\",\"\",\"\",\"\",\"\",new Department(0,\"\"))));\r\nreturn response;\r\n}\r\ncatch(e){\r\n    throw e;\r\n}\r\n\r\n}\r\n\r\n\r\n//get all the appointmetns of a patient\r\nexport const patientAllAppointment=async(patientId:number):Promise<any>=>{\r\n    try{\r\n\r\n        let response=await project2.get(`appointments/patient/${patientId}`);\r\n    if(response.data<1){\r\n        throw new Error;\r\n\r\n    }else{\r\n        return response.data;\r\n    }\r\n    \r\n\r\n\r\n    }catch(e){\r\n        throw e;\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n\r\n//get all the doctors of a department\r\n\r\nexport const departmentDoctors=async(id:number):Promise<any>=>{\r\n\r\n    try{\r\n\r\n        let doctors=await project2.get(`departments/${id}/doctors`);\r\n        return doctors.data;\r\n\r\n    }catch(e){\r\n        throw e;\r\n    }\r\n\r\n}\r\n\r\nexport const saveAppointment=async(det:string,dateS:Date,timeS:number,doct:Doctor,pat:Patient,stat:Status,ty:Type):Promise<any>=>{\r\n    try{\r\n        console.log(dateS);\r\n\r\nlet id=0;\r\nlet appointment=await project2.post(\"/appointments\",{id,details:det,dateSlot:dateS,timeSlot:timeS,doctor:doct,patient:pat,status:stat,type:ty});\r\nreturn appointment.data;\r\n    }catch(e){\r\n        throw e;\r\n    }\r\n}\r\n\r\n\r\n//create a new pateint\r\n\r\nexport const createPatient=async(firstN:string,lastN:String,gender:string,username:string,password:string,birthD:number,add:string,phone:string,email:string):Promise<any>=>{\r\ntry{\r\n    let response=await project2.post(\"/patients\",{patientId:0,physicalRecord:null,firstName:firstN,lastName:lastN,gender:gender,username:username,password:password,birthDate:birthD,\r\n    address:add,phone:phone,email:email});\r\n    console.log(response.data);\r\n\r\n}catch(e){\r\n\r\n    throw e;\r\n}\r\n\r\n}\r\n\r\n\r\n//get the emergency record\r\nexport const getEmergency=async(id:number)=>{\r\n    try{\r\n        let response=await project2.get(`econtacts/patient/${id}`);\r\n        return response.data;\r\n\r\n    }catch(e){\r\n        throw e\r\n    }\r\n}\r\n\r\n//make a new econtact\r\nexport const saveEmergency=async(name:string,address:string,phone:string,relation:string,patientId:Patient)=>{\r\n    try{\r\n        let id=0;\r\n        let response=await project2.post(`/econtacts`,{id,name,address,phone,relation,patientId});\r\n        console.log(response)\r\n        return response.data;\r\n\r\n    }catch(e){\r\n        throw e\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { Button, Container, Row, Col } from \"reactstrap\";\r\n\r\nimport { withRouter } from 'react-router-dom';\r\nimport { toast, ToastContainer } from \"react-toastify\";\r\nimport { loginpatient } from '../../api/apipatient';\r\n\r\n\r\nexport class PatientLoginComponent extends React.Component<any,any>{\r\n\r\nconstructor(props:any){\r\n    super(props);\r\n    this.state={\r\n        username:\"\",\r\n        password:\"\"\r\n    }\r\n\r\n}\r\n\r\n\r\nverifyUser=async(event:any)=>{\r\n    event.preventDefault();\r\n   \r\n    try{\r\nlet patient =await loginpatient(this.state.username,this.state.password);\r\nconsole.log(patient);\r\nthis.props.history.push(\"/patient/home\");\r\n\r\n\r\n    }catch(e){\r\n        // toast(\"invalid credentials\", { type: \"error\" });\r\n        console.log(e);\r\n\r\n    }\r\n\r\n\r\n  \r\n\r\n\r\n}\r\n\r\nsetUsername=(event:any)=>{\r\n    let username = event.target.value;\r\n    this.setState({\r\n        username: username\r\n    })\r\n\r\n\r\n\r\n}\r\n\r\nsetPassword=(event:any)=>{\r\n    let password = event.target.value;\r\n    this.setState({\r\n        password: password\r\n    })\r\n\r\n}\r\n\r\n\r\n\r\n\r\n    render(){\r\n\r\n\r\n        return(\r\n            <div className=\"row align-items-center justify-content-center \" style={{ height: \"80%\" }}  >\r\n            <div className=\"login-column\">\r\n            <form onSubmit={this.verifyUser} className=\"form-signin \" >\r\n                <h2 > Please Sign In</h2>\r\n                <br/>\r\n                <div className=\"form-group\">\r\n                    <label><span className=\"font-weight-bold\">UserName:</span><input type=\"text\" className=\"form-control\" value={this.state.username} onChange={this.setUsername} required /></label>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label><span className=\"font-weight-bold\">Password:</span><input type=\"password\" className=\"form-control\" value={this.state.password} onChange={this.setPassword} required /></label>\r\n                </div>\r\n                {/* <button className=\"btn btn-primary\" type=\"submit\">Login</button> */}\r\n                <Button color=\"primary\" className=\"btn-block\">Login</Button>\r\n            </form>\r\n            </div>\r\n            </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n        )\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n\r\nexport const PatientLoginComponentR=withRouter(PatientLoginComponent);","import React from \"react\";\r\nimport { NavbarBrand, Navbar, Nav, NavItem } from \"reactstrap\";\r\n\r\nimport { NavLink, withRouter } from 'react-router-dom';\r\n\r\nexport class HomeNavigationComponent extends React.Component<any,any>{\r\n\r\n    render(){\r\n\r\nreturn(\r\n\r\n    <div>\r\n    <Navbar  color=\"light\" light expand=\"md\">\r\n\r\n      <Nav  tabs className=\"w-100\">\r\n      <NavbarBrand>\r\n                    \r\n                 \r\n                </NavbarBrand>\r\n        <NavItem>\r\n          <NavLink  to=\"/patientlogin\" className=\"nav-link\" activeClassName=\"active\">Patient</NavLink>\r\n        </NavItem>\r\n        <NavItem>\r\n          <NavLink  to=\"/doctorlogin\" className=\"nav-link\" activeClassName=\"active\">Doctor</NavLink>\r\n        </NavItem>\r\n        <NavItem>\r\n          <NavLink  to=\"/home\" className=\"nav-link\" activeClassName=\"active\">home</NavLink>\r\n        </NavItem>\r\n        <NavItem>\r\n          <NavLink  to=\"/createaccount\" className=\"nav-link\" activeClassName=\"active\">Create Account</NavLink>\r\n        </NavItem>\r\n      \r\n      \r\n\r\n\r\n      </Nav>\r\n      {/* <NavItem className=\"float-right\" tag={() => { return <Button className=\"float-right\" onClick={this.logoutUser} color=\"primary\" outline>Logout</Button> }} /> */}\r\n    </Navbar>\r\n\r\n\r\n\r\n  </div>\r\n\r\n\r\n\r\n\r\n\r\n)\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    \r\n}","import React from \"react\";\r\nimport { Navbar, Nav, NavbarBrand, NavItem, Button } from \"reactstrap\";\r\n\r\nimport { NavLink, withRouter } from 'react-router-dom';\r\nimport { IState } from \"../../redux/reducers\";\r\n\r\nimport { loginSavePatient,loginSaveDoctor} from \"../../redux/action-mappers\";\r\nimport { connect } from \"react-redux\";\r\n\r\nexport class PatientNavigationComponent extends React.Component<any,any>{\r\n\r\n\r\n    logoutUser = (e: any) => {\r\n   \r\n        // console.log(this.props.location.pathname)\r\n        this.props.loginSavePatient(null);\r\n        this.props.loginSaveDoctor(null);\r\n        this.props.history.push(\"/home\");\r\n    \r\n    \r\n      }\r\n\r\n\r\n\r\n    render(){\r\n\r\nreturn(\r\n\r\n\r\n<>\r\n    <Navbar  color=\"light\" light expand=\"md\">\r\n\r\n    <Nav  tabs className=\"w-100\">\r\n    <NavbarBrand>\r\n                  \r\n               \r\n              </NavbarBrand>\r\n              <NavItem>\r\n        <NavLink  to=\"/patient/home\" className=\"nav-link\" activeClassName=\"active\">Home</NavLink>\r\n      </NavItem>\r\n      <NavItem>\r\n        <NavLink  to=\"/patient/appointments\" className=\"nav-link\" activeClassName=\"active\">Appointments</NavLink>\r\n      </NavItem>\r\n      <NavItem>\r\n        <NavLink  to=\"/patient/newappointment\" className=\"nav-link\" activeClassName=\"active\">New Appointment</NavLink>\r\n      </NavItem>\r\n      <NavItem>\r\n        <NavLink  to=\"/patient/record\" className=\"nav-link\" activeClassName=\"active\">Record</NavLink>\r\n      </NavItem>\r\n      <NavItem>\r\n        <NavLink  to=\"/patient/emergency\" className=\"nav-link\" activeClassName=\"active\">Emergency</NavLink>\r\n      </NavItem>\r\n\r\n\r\n      <NavItem className=\"float-right\" tag={() => { return <Button className=\"float-right\" onClick={this.logoutUser} color=\"primary\" outline>Logout</Button> }} />\r\n    \r\n    \r\n\r\n\r\n    </Nav>\r\n    {/* <NavItem className=\"float-right\" tag={() => { return <Button className=\"float-right\" onClick={this.logoutUser} color=\"primary\" outline>Logout</Button> }} /> */}\r\n  </Navbar>\r\n  </>\r\n\r\n)\r\n\r\n    }\r\n\r\n\r\n\r\n    \r\n}\r\n\r\n\r\nconst mapStateToProps = (state: IState) => {\r\n \r\n    return {\r\n      ...state.loginUser\r\n    }\r\n  \r\n  }\r\n  \r\n  const mapDispatchToProps = {\r\nloginSavePatient,\r\nloginSaveDoctor\r\n\r\n  \r\n  \r\n  }\r\n  \r\n  \r\n  export let  PatientNavigationComponentS = connect(mapStateToProps, mapDispatchToProps)( PatientNavigationComponent);\r\n  export let PatientNavigationComponentSW=withRouter( PatientNavigationComponentS);","\r\nimport React from \"react\";\r\n\r\n\r\ninterface IProps{\r\n    timeSlot:number\r\n}\r\n\r\ninterface IDisState{\r\n    timeFromTo:any\r\n}\r\n\r\nexport class ChangeTimeSlotComponent extends React.Component<IProps,IDisState>{\r\n\r\n\r\n    constructor(props:IProps){\r\n        super(props);\r\n        this.state={\r\n            timeFromTo:null\r\n        }\r\n    }\r\n\r\ncomponentDidMount=()=>{\r\n    this.changeView(this.props.timeSlot);\r\n// console.log(this.props.timeSlot);\r\n\r\n\r\n}\r\n\r\n\r\n// componentDidUpdate=(prevProps:any)=>{\r\n    \r\n//     if(prevProps.timeSlot!==this.props.timeSlot){\r\n        \r\n//         this.changeView(this.props.timeSlot);\r\n//     }\r\n\r\n// }\r\n\r\n// componentWillReceiveProps=(nextProps:any)=>{\r\n//     if(nextProps.timeSlot!==this.props.timeSlot){\r\n        \r\n//         this.changeView(nextProps.timeSlot);\r\n//     }\r\n\r\n\r\n// }\r\n\r\n\r\nchangeView=(timeSlot:number)=>{\r\n    // console.log(this.state.timeFromTo)\r\n\r\n    switch(timeSlot){\r\n        case 1:\r\n            this.setState({\r\n                timeFromTo:\"10-10:30 AM\"\r\n\r\n            })\r\n            break;\r\n          \r\n                    case 2:\r\n                        this.setState({\r\n                            timeFromTo:\"10:30-11 AM\"\r\n            \r\n                        })\r\n                        break;\r\n                        case 3:\r\n                            this.setState({\r\n                                timeFromTo:\"11-11:30 AM\"\r\n                \r\n                            })\r\n                            break;\r\n                            case 4:\r\n                                this.setState({\r\n                                    timeFromTo:\"11:30-12 PM\"\r\n                    \r\n                                })\r\n                                break;\r\n                                case 5:\r\n                                    this.setState({\r\n                                        timeFromTo:\"12-12:30 PM\"\r\n                        \r\n                                    })\r\n                                    break;\r\n                                    case 6:\r\n                                        this.setState({\r\n                                            timeFromTo:\"12:30-1 PM\"\r\n                            \r\n                                        })\r\n                                        break;\r\n                                        case 7:\r\n                                            this.setState({\r\n                                                timeFromTo:\"3-3:30 PM\"\r\n                                \r\n                                            })\r\n                                            break;\r\n                                            case 8:\r\n                                                this.setState({\r\n                                                    timeFromTo:\"3:30-4 PM\"\r\n                                    \r\n                                                })\r\n                                                break;\r\n                                                case 9:\r\n                                                    this.setState({\r\n                                                        timeFromTo:\"4-4:30 PM\"\r\n                                        \r\n                                                    })\r\n                                                    break;\r\n                                                    case 10:\r\n                                                        this.setState({\r\n                                                            timeFromTo:\"4:30-5 PM\"\r\n                                            \r\n                                                        })\r\n                                                        break;\r\n                                                       default:\r\n                                                           break;\r\n\r\n\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nrender(){\r\n\r\n\r\n    if(this.state.timeFromTo){\r\n        return(\r\n            <>\r\n            {this.state.timeFromTo}\r\n            </>\r\n        )\r\n    }else{\r\n        return(\r\n            <>\r\n            <p>none</p>\r\n            </>\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\n}","import React from \"react\";\r\nimport { Container, Row, Card, CardBody, ListGroup, ListGroupItem } from \"reactstrap\";\r\nimport { Appointment } from \"../../models/appointment\";\r\nimport { ChangeTimeSlotComponent } from \"./changeTimeSlot\";\r\n\r\n\r\n\r\ninterface IDisplayProps{\r\n\r\n    appointments:any;\r\n}\r\n\r\n\r\nexport class DisplayPatientAppointmentComponent extends React.Component<IDisplayProps,any>{\r\n\r\nconstructor(props:IDisplayProps){\r\n    super(props);\r\n    this.state={\r\n        appoint:null\r\n    }\r\n}\r\n\r\n\r\ncomponentDidMount=()=>{\r\n   \r\n    this.setState({\r\n        appoint:this.props.appointments\r\n\r\n    })\r\n}\r\n\r\n\r\n\r\n    render(){\r\nconsole.log(this.state.appoint);\r\n      if(this.state.appoint){\r\nreturn(\r\n      this.state.appoint.map((elem:Appointment)=>{\r\n\r\n\r\n        return(\r\n        <div key={elem.appointmentId}>\r\n          <Card>\r\n              <CardBody>\r\n\r\n<ListGroup>\r\n<ListGroupItem>\r\n    Appointment Id: {elem.appointmentId}\r\n</ListGroupItem>\r\n<ListGroupItem>\r\n    Details: {elem.details}\r\n</ListGroupItem>\r\n<ListGroupItem>\r\n    Date: {elem.dateSlot}\r\n</ListGroupItem>\r\n<ListGroupItem>\r\n    Time: <ChangeTimeSlotComponent timeSlot={elem.timeSlot}/>\r\n</ListGroupItem>\r\n<ListGroupItem>\r\nDoctor: {elem.doctor.firstName} {elem.doctor.lastName}\r\n</ListGroupItem>\r\n<ListGroupItem>\r\nStatus: {elem.status.statusName}\r\n</ListGroupItem>\r\n<ListGroupItem>\r\nType: {elem.type.typeName}\r\n</ListGroupItem>\r\n\r\n\r\n</ListGroup>\r\n\r\n\r\n              </CardBody>\r\n              \r\n              \r\n              \r\n              \r\n              </Card>  \r\n\r\n\r\n\r\n        </div>\r\n        )\r\n\r\n\r\n      })\r\n\r\n)\r\n\r\n      }else{\r\n          return(\r\n              <p></p>\r\n          )\r\n      }\r\n\r\n\r\n\r\n    \r\n    }\r\n}","\r\nimport React from \"react\";\r\nimport { patientAllAppointment } from \"../../api/apipatient\";\r\nimport { IState } from \"../../redux/reducers\";\r\nimport { connect } from \"react-redux\";\r\nimport { Container, Row, Col } from \"reactstrap\";\r\nimport { DisplayPatientAppointmentComponent } from \"./displaypatientAppointment\";\r\n\r\n\r\ninterface IPatientAppState{\r\n    appointment:any\r\n}\r\n\r\n\r\nexport class PatientAppointmentComponent extends React.Component<any,IPatientAppState>{\r\n\r\n\r\n    constructor(props:any){\r\n        super(props);\r\n        this.state={\r\n            appointment:null\r\n        }\r\n    }\r\n\r\n\r\ncomponentDidMount=async ()=>{\r\ntry{\r\n   console.log(this.props.patient.patientId)\r\n    let id=this.props.patient.patientId;\r\n    let appointments=await patientAllAppointment(id);\r\n   if(appointments){\r\n    console.log(appointments);\r\n    this.setState({\r\n        appointment:appointments,\r\n    });\r\n   } \r\n   \r\n\r\n}catch(e){\r\n    console.log(e);\r\n\r\n}\r\n\r\n\r\n}\r\n\r\n\r\n    render(){\r\nif(this.state.appointment){\r\n    return(\r\n<>\r\n   <Container>\r\n       <Row>\r\n<Col>\r\n<DisplayPatientAppointmentComponent appointments={this.state.appointment}/>\r\n\r\n\r\n</Col>\r\n\r\n\r\n\r\n       </Row>\r\n       \r\n       \r\n       </Container>   \r\n      \r\n      \r\n        </>\r\n    \r\n        \r\n        \r\n                )\r\n            }\r\n            if(!this.state.appointment){\r\n                return(\r\n                    <p></p>\r\n                )\r\n            }\r\n \r\n}\r\n\r\n\r\n\r\n\r\n}\r\n\r\nconst mapStateToProps = (state: IState) => {\r\n \r\n    return {\r\n      ...state.loginUser\r\n    }\r\n  \r\n  }\r\n  \r\n  const mapDispatchToProps = {\r\n// loginSavePatient,\r\n// loginSaveDoctor\r\n\r\n  \r\n  \r\n  }\r\n  \r\n  \r\n  export let  PatientAppointmentComponentW = connect(mapStateToProps, mapDispatchToProps)( PatientAppointmentComponent);","export class Status{\r\n    statusId:number;\r\n    statusName:string;\r\n\r\n\r\n    constructor(statusId:number,statusName:string){\r\n        this.statusId=statusId;\r\n        this.statusName=statusName;\r\n\r\n\r\n\r\n    }\r\n}","\r\n\r\nexport class Type {\r\n\r\ntypeId:number;\r\ntypeName:string;\r\n\r\nconstructor(typeId:number,typeName:string){\r\n    this.typeId=typeId;\r\n    this.typeName=typeName;\r\n\r\n}\r\n\r\n\r\n}","\r\nimport React from \"react\";\r\nimport { Modal, Button, Form, FormGroup, Label, Input, Container } from \"reactstrap\";\r\nimport { Doctor } from \"../../models/doctor\";\r\nimport { IState } from \"../../redux/reducers\";\r\nimport { loginSavePatient,loginSaveDoctor} from \"../../redux/action-mappers\";\r\nimport { connect } from \"react-redux\";\r\nimport { ChangeTimeSlotComponent } from \"./changeTimeSlot\";\r\nimport { Status } from \"../../models/appointmentstatus\";\r\nimport { Type } from \"../../models/appointmentType\";\r\nimport { saveAppointment } from \"../../api/apipatient\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\n\r\ninterface IProps{\r\n    onDisplay:any,\r\n    changeModal:any,\r\n    doctor1:any,\r\n    timeslot:number,\r\n    dateslot:any,\r\n    patient?:any,\r\n    history?:any\r\n    \r\n}\r\n\r\n\r\ninterface IModalState{\r\ndetails:any,\r\ntype:any,\r\ntime:any\r\n\r\n\r\n}\r\nexport class AppointmentModalComponent extends React.Component<any,any>{\r\n\r\nconstructor(props:any){\r\n    super(props)\r\n    this.state={\r\n        details:\"\",\r\n        type:1,\r\n        time:null\r\n    }\r\n}\r\n\r\n\r\ncomponentDidMount=()=>{\r\n    if(this.props.timeslot){\r\n        this.setState({\r\n            time:this.props.timeslot\r\n        })\r\n    }\r\n\r\n}\r\n\r\ncomponentDidUpdate=(prevProps:any)=>{\r\n    \r\n    if(prevProps.timeslot!==this.props.timeslot){\r\n        this.setState({\r\n            time:this.props.timeslot\r\n        })\r\n    }\r\n\r\n}\r\n\r\n\r\nchangeModal=()=>{\r\n    this.props.changeModal();\r\n}\r\n\r\n\r\nonChangesDetails=(e:any)=>{\r\n \r\n    let value = e.target.value;\r\n    this.setState({\r\n        details:value\r\n    })\r\n\r\n}\r\n\r\nonChangesType=(e:any)=>{\r\n \r\n    let value = e.target.value;\r\n    this.setState({\r\n        type:value\r\n    })\r\n\r\n}\r\n\r\nonSubmits=async(event:any)=>{\r\nevent.preventDefault();\r\nlet details=this.state.details;\r\n\r\nlet dateSlot=this.props.dateslot;\r\nconsole.log(dateSlot);\r\nlet timeSlot=this.props.timeslot;\r\nlet doctor=this.props.doctor1;\r\nlet patient=this.props.patient;\r\nlet status=new Status(1,\"scheduled\");\r\nlet typename=this.changeType();\r\nlet type=new Type(this.state.type,typename);\r\ntry{\r\nlet response=await saveAppointment(details,dateSlot,timeSlot,doctor,patient,status,type);\r\nconsole.log(response);\r\nthis.props.history.push(\"/patient/appointments\");\r\n}catch(e){\r\nconsole.log(e);\r\n}\r\nthis.changeModal();\r\n// this.props.history.push(\"/patient/appointments\");\r\n\r\n\r\n\r\n}\r\n\r\nchangeType=():string=>{\r\n    let typeInt=this.state.type;\r\n    let typename=\"\";\r\n    switch(typeInt){\r\n        case 1:\r\n            typename=\"routine visit\"\r\n            break;\r\n            case 2:\r\n                typename=\"office visit\"\r\n                break;\r\n                case 3:\r\n                    typename=\"return visit\"\r\n                    break;\r\n                    default:\r\n                        break;\r\n    }\r\n    return typename;\r\n\r\n}\r\n\r\n\r\n    render(){\r\n    if(this.state.time){\r\n        return(\r\n            <Modal isOpen={this.props.onDisplay}  >\r\n<Container>\r\n<Form onSubmit={this.onSubmits}>\r\n<FormGroup>\r\n<Label>Details</Label>\r\n<Input type=\"text\" name=\"details\" value={this.state.details} onChange={this.onChangesDetails} required />\r\n\r\n</FormGroup>\r\n<FormGroup>\r\n<Label>Date:</Label>\r\n<Input type=\"text\" value={this.props.dateslot||\"\"} disabled/>\r\n</FormGroup>\r\n<FormGroup>\r\n<Label>TimeSlot:</Label>\r\n{this.props.timeslot}\r\n</FormGroup>\r\n<FormGroup>\r\n<Label>Type:</Label>  \r\n<Input type=\"select\" value={this.state.type} onChange={this.onChangesType} required>\r\n<option value=\"1\">Routine Visit</option>\r\n<option value=\"2\">Office Visit</option>\r\n<option value=\"3\">Return Visit</option>\r\n</Input>\r\n</FormGroup>\r\n<Button type=\"submit\">Confirm</Button>\r\n<Button onClick={this.changeModal} className=\"mt-1 mb-1 ml-1\">Cancel</Button>  \r\n\r\n\r\n\r\n\r\n</Form>\r\n\r\n \r\n  </Container>\r\n</Modal>\r\n\r\n\r\n\r\n\r\n        \r\n        )\r\n    }\r\n    else{\r\n        return(\r\n            <p>dsfdfd</p>\r\n        )\r\n    }\r\n\r\n\r\n\r\n\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: IState) => {\r\n \r\n    return {\r\n      ...state.loginUser\r\n    }\r\n  \r\n  }\r\n  \r\n  const mapDispatchToProps = {\r\nloginSavePatient,\r\nloginSaveDoctor\r\n\r\n  \r\n  \r\n  }\r\n  \r\n  export let  AppointmentModalComponentR=withRouter(AppointmentModalComponent);\r\n  export let AppointmentModalComponentS = connect(mapStateToProps, mapDispatchToProps)(AppointmentModalComponentR);\r\n\r\n","import React from \"react\";\r\nimport { Doctor } from \"../../models/doctor\";\r\nimport { Appointment } from \"../../models/appointment\";\r\nimport { Table, Button, Modal, Form } from \"reactstrap\";\r\nimport { ChangeTimeSlotComponent } from \"./changeTimeSlot\";\r\nimport { AppointmentModalComponent, AppointmentModalComponentS } from \"./appointmentForm\";\r\nimport { times } from \"./times\";\r\n\r\n\r\n\r\n\r\ninterface IMakeState {\r\n    tomorrow: any,\r\n    dayAfterT: any,\r\n    tomorrowDate: any,\r\n    dayAfterDate: any,\r\n    modal: boolean,\r\n    timeslot: any,\r\n    dateslot: any,\r\n    dayAfter3O:any,\r\n    dayAfter3Date:any\r\n\r\n}\r\n\r\ninterface IMakeProp {\r\n    doctor: Doctor;\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport class MakeNewAppointmentComponent extends React.Component<IMakeProp, IMakeState>{\r\n    constructor(props: IMakeProp) {\r\n        super(props);\r\n        this.state = {\r\n            tomorrow: null,\r\n            dayAfterT: null,\r\n            tomorrowDate: null,\r\n            dayAfterDate: null,\r\n            modal: false,\r\n            timeslot: null,\r\n            dateslot: null,\r\n            dayAfter3O:null,\r\n             dayAfter3Date:null\r\n\r\n        }\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.makeApointments();\r\n    }\r\n\r\n\r\n    makeApointments = () => {\r\n        let tomorrowO: any = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\r\n        let dayAfterTO: any = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\r\n        let dayAfterT3O: any = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\r\n        let date1 = new Date();\r\n\r\n        let dateutc = Date.UTC(date1.getUTCFullYear(), date1.getUTCMonth(), date1.getUTCDate(),\r\n            date1.getUTCHours(), date1.getUTCMinutes(), date1.getUTCSeconds());\r\n\r\nlet [tomorrow,dayafterT,dayafterT3]=times();\r\n        \r\n        // console.log(tomorrow);\r\n        // console.log(dayafterT);\r\n        // console.log(dayafterT3)\r\n\r\n        let today1 = new Date();\r\n\r\n        today1 = new Date(dateutc);\r\n        let today = today1.toISOString().slice(0, 10);\r\n\r\n     \r\n\r\n        let appointments: any[] | undefined = this.props.doctor.appointments;\r\n\r\n\r\n\r\n        if (appointments) {\r\n             appointments.map((appointment: Appointment) => {\r\n\r\n\r\n                let stringDate = appointment.dateSlot.toString();\r\n\r\n                let parts = stringDate.split('-');\r\n                //already stored in utc\r\n                let dates1 = new Date(Number(parts[0]), Number(parts[1]) - 1, Number(parts[2]));\r\n               \r\n\r\n                let appointdate = dates1.toISOString().slice(0, 10);\r\n             \r\n                let OnTimeSlot = appointment.timeSlot;\r\n                // console.log(appointdate > today);\r\n                if (appointdate > today) {\r\n\r\n                    if (appointdate === tomorrow) {\r\n\r\n\r\n                        tomorrowO = tomorrowO.filter((elem: any) => {\r\n                            return elem != OnTimeSlot;\r\n\r\n                        })\r\n\r\n\r\n\r\n\r\n\r\n                    }\r\n\r\n\r\n                    if (appointdate === dayafterT) {\r\n                      \r\n\r\n\r\n                        dayAfterTO = dayAfterTO.filter((elem: any) => {\r\n                            return elem != OnTimeSlot;\r\n                        })\r\n\r\n\r\n\r\n\r\n\r\n                    }\r\n\r\n                    if (appointdate === dayafterT3) {\r\n                        // dayAfterTO = [];\r\n\r\n\r\n                        dayAfterT3O= dayAfterT3O.filter((elem: any) => {\r\n                            return elem != OnTimeSlot;\r\n                        })\r\n\r\n\r\n\r\n\r\n\r\n                    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n                }\r\n\r\nreturn 0;\r\n\r\n            })\r\n\r\n        }\r\n\r\n   \r\n        this.setState({\r\n            tomorrow: tomorrowO,\r\n            dayAfterT: dayAfterTO,\r\n            tomorrowDate: tomorrow,\r\n            dayAfterDate: dayafterT,\r\n\r\n            dayAfter3O:dayAfterT3O,\r\n            dayAfter3Date:dayafterT3\r\n\r\n\r\n        })\r\n\r\n    }\r\n\r\n\r\n\r\n    changeModal = (event: any) => {\r\n        this.setState({\r\n            modal: !this.state.modal\r\n        })\r\n\r\n    }\r\n\r\n    onClicks = (event: any) => {\r\n        let timeSlot = event.target.id; //integer\r\n        let date = event.target.value;\r\n     \r\n        this.setState({\r\n            timeslot: timeSlot,\r\n            dateslot: date,\r\n            modal: !this.state.modal\r\n        })\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    render() {\r\n\r\n\r\n        if (this.state.tomorrow && this.state.dayAfterT) {\r\n            return (\r\n                <>\r\n                    <Table size=\"sm\">\r\n                        <tbody>\r\n                            <tr>\r\n                                <th>{this.state.tomorrowDate}</th>\r\n                                {this.state.tomorrow.map((slots: any) => {\r\n\r\n                                    return (\r\n                                        <td key={slots}>\r\n                                            <Button id={slots} onClick={this.onClicks} value={this.state.tomorrowDate}><ChangeTimeSlotComponent timeSlot={slots} /></Button>\r\n\r\n\r\n                                        </td>\r\n                                    )\r\n                                })}\r\n\r\n\r\n\r\n\r\n                            </tr>\r\n                            <tr>\r\n                                <th>{this.state.dayAfterDate}</th>\r\n                                {this.state.dayAfterT.map((slots: any) => {\r\n\r\n                                    return (\r\n                                        <td key={slots}>\r\n                                            <Button id={slots} onClick={this.onClicks} value={this.state.dayAfterDate}><ChangeTimeSlotComponent timeSlot={slots} /></Button>\r\n\r\n\r\n                                        </td>\r\n                                    )\r\n                                })}\r\n\r\n\r\n                            </tr>\r\n\r\n                            <tr>\r\n                                <th>{this.state.dayAfter3Date}</th>\r\n                                {this.state.dayAfter3O.map((slots: any) => {\r\n\r\n                                    return (\r\n                                        <td key={slots}>\r\n                                            <Button id={slots} onClick={this.onClicks} value={this.state.dayAfter3Date}><ChangeTimeSlotComponent timeSlot={slots} /></Button>\r\n\r\n\r\n                                        </td>\r\n                                    )\r\n                                })}\r\n\r\n\r\n                            </tr>\r\n\r\n\r\n                        </tbody>\r\n\r\n\r\n\r\n                    </Table>\r\n\r\n{\r\n    this.state.timeslot&&\r\n    <AppointmentModalComponentS onDisplay={this.state.modal} changeModal={this.changeModal} doctor1={this.props.doctor} timeslot={this.state.timeslot} dateslot={this.state.dateslot} />\r\n}\r\n\r\n                  \r\n\r\n\r\n\r\n\r\n\r\n                </>\r\n            )\r\n\r\n\r\n\r\n\r\n        } else {\r\n            return (\r\n                <p>Not</p>\r\n            )\r\n        }\r\n\r\n    }\r\n\r\n}","\r\n\r\n export  let times=()=>{\r\n    let date1 = new Date();\r\n    console.log(date1.getUTCDay());\r\n    let dateutc = Date.UTC(date1.getUTCFullYear(), date1.getUTCMonth(), date1.getUTCDate(),\r\n    date1.getUTCHours(), date1.getUTCMinutes(), date1.getUTCSeconds());\r\n    let tomorrow1 = new Date(dateutc);\r\n    let dayafterT1 = new Date(dateutc);\r\n    let dayafterT31 = new Date(dateutc);\r\n\r\nswitch(date1.getUTCDay()){\r\n\r\n    case 3:\r\n        tomorrow1.setDate(new Date().getDate() + 1);\r\n        dayafterT1.setDate(new Date().getDate() + 2);\r\n        dayafterT31.setDate(new Date().getDate() + 5);\r\n        break;\r\n  \r\n  \r\n    case 4:\r\n        tomorrow1.setDate(new Date().getDate() + 1);\r\n        dayafterT1.setDate(new Date().getDate() + 4);\r\n        dayafterT31.setDate(new Date().getDate() + 5);\r\n        break;\r\n\r\n\r\n\r\n\r\n    case 5:\r\n        tomorrow1.setDate(new Date().getDate() + 3);\r\n        dayafterT1.setDate(new Date().getDate() + 4);\r\n        dayafterT31.setDate(new Date().getDate() + 5);\r\n        break;\r\n\r\n\r\n\r\n    case 6:\r\n        tomorrow1.setDate(new Date().getDate() + 2);\r\n        dayafterT1.setDate(new Date().getDate() + 3);\r\n        dayafterT31.setDate(new Date().getDate() + 4);\r\n        break;\r\n\r\n\r\n\r\n    default:\r\n        tomorrow1.setDate(new Date().getDate() + 1);\r\n        dayafterT1.setDate(new Date().getDate() + 2);\r\n        dayafterT31.setDate(new Date().getDate() + 3);\r\n        break;\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\nlet tomorrow = tomorrow1.toISOString().slice(0, 10);\r\n\r\nlet dayafterT = dayafterT1.toISOString().slice(0, 10);\r\n\r\nlet dayafterT3 = dayafterT31.toISOString().slice(0, 10);\r\n\r\nreturn[tomorrow,dayafterT,dayafterT3];\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n","\r\n\r\nimport React from \"react\";\r\nimport { Doctor } from \"../../models/doctor\";\r\nimport { Card, ListGroup, CardBody, ListGroupItem, Button, Collapse } from \"reactstrap\";\r\nimport { MakeNewAppointmentComponent } from \"./makenewAppointment\";\r\nimport { EXpNewAppointmentComponent } from \"./ExpNewAppointment\";\r\n\r\ninterface IDoctor{\r\ndoctor:Doctor\r\n}\r\n\r\n\r\n\r\n\r\nexport class DisplayDoctorComponent extends React.Component<IDoctor,any>{\r\n\r\n    constructor(props:any){\r\n        super(props)\r\n\r\n        this.state={\r\n            isOpen:false\r\n        }\r\n    }\r\n\r\n    toggle=()=>{\r\n        let isOpen=this.state.isOpen\r\nthis.setState({\r\n    isOpen:!isOpen\r\n})\r\n\r\n    }\r\n\r\n\r\n\r\n    render(){\r\n\r\n\r\nreturn(\r\n    <div key={this.props.doctor.doctorId}>\r\n    <Card>\r\n        {this.props.doctor.department.departmentName}\r\n        <CardBody>\r\n<ListGroup>\r\n<ListGroupItem>\r\nName: {this.props.doctor.firstName} {this.props.doctor.lastName}\r\n</ListGroupItem>\r\n<ListGroupItem>\r\nSpeciality: {this.props.doctor.speciality}\r\n</ListGroupItem>\r\n\r\n\r\n\r\n</ListGroup>\r\n\r\n\r\n\r\n<Button className=\" mt-1 mb-1\" onClick={this.toggle} >Make an Appointment</Button>\r\n\r\n<Collapse isOpen={this.state.isOpen}>\r\n<div>\r\n{/* <EXpNewAppointmentComponent   doctor={this.props.doctor}/> */}\r\n<MakeNewAppointmentComponent doctor={this.props.doctor}/>\r\n\r\n\r\n\r\n</div>\r\n\r\n\r\n\r\n</Collapse>\r\n\r\n\r\n        </CardBody>\r\n       \r\n        \r\n        \r\n        </Card> \r\n\r\n\r\n\r\n\r\n </div>\r\n\r\n\r\n\r\n\r\n\r\n)\r\n\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}","\r\nimport React from \"react\";\r\nimport { departmentDoctors } from \"../../api/apipatient\";\r\nimport { Doctor } from \"../../models/doctor\";\r\nimport { Card, CardBody, ListGroup, ListGroupItem, Button, Modal, ModalBody, Collapse } from \"reactstrap\";\r\nimport { DisplayDoctorComponent } from \"./displaydoctorappointment\";\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\n\r\ninterface IDepartment{\r\n    doctors:Doctor[]|null;\r\n}\r\n\r\nexport class DepartmentDoctorsComponent extends React.Component<any,IDepartment>{\r\n\r\nconstructor(props:any){\r\n    super(props);\r\n    this.state={\r\n        doctors:null\r\n    }\r\n}\r\n\r\ncomponentDidMount=async()=>{\r\nlet response=await this.changes();\r\n}\r\n\r\nchanges=async()=>{\r\n    \r\ntry{\r\n\r\n\r\n    let doctors=await departmentDoctors(this.props.departmentid);\r\n    console.log(doctors);\r\n    this.setState({\r\n        doctors:doctors\r\n    })\r\n \r\n }catch(e){\r\n     console.log(e)\r\n \r\n }\r\n\r\n}\r\n\r\n// componentWillReceiveProps=async()=>{\r\n//   let response=await  this.changes();\r\n\r\n\r\n// }\r\n\r\ncomponentDidUpdate=(prevProps:any)=>{\r\n    \r\n    if(prevProps.departmentid!==this.props.departmentid){\r\n        this.changes();\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\nrender(){\r\n  if(this.state.doctors&&this.props.departmentid){\r\n    //   console.log(this.props.departmentid)\r\n      return(\r\n<>\r\n      {/* <p>{this.props.departmentid}</p> */}\r\n      <h2>{this.state.doctors[0].department.departmentName.toUpperCase() }</h2>\r\n      \r\n      {this.state.doctors.map((doctor:Doctor)=>{\r\n\r\n\r\n\r\n\r\nreturn(\r\n\r\n    <DisplayDoctorComponent key={doctor.doctorId} doctor={doctor}/>\r\n\r\n\r\n\r\n\r\n\r\n\r\n     ) })}\r\n\r\n\r\n \r\n\r\n</>\r\n\r\n\r\n\r\n\r\n      )\r\n\r\n\r\n\r\n\r\n\r\n  }else{\r\n      return(\r\n          <p>Hello</p>\r\n      )\r\n  }\r\n\r\n    \r\n}\r\n\r\n\r\n}\r\n\r\nexport let DepartmentDoctorsComponentR=withRouter(DepartmentDoctorsComponent);","\r\n\r\nimport React from \"react\";\r\nimport { Container, Row, Col, NavItem, ButtonToggle, ButtonGroup } from \"reactstrap\";\r\nimport { BrowserRouter as Router, Route, Switch, Redirect, withRouter } from 'react-router-dom';\r\nimport { NavLink } from \"react-router-dom\";\r\nimport { DepartmentDoctorsComponent, DepartmentDoctorsComponentR } from \"./departmentDoctors\";\r\n\r\n\r\n\r\n\r\n\r\n\r\nexport class NewAppointmentComponent extends React.Component<any, any>{\r\n\r\n\r\n    constructor(props: any) {\r\n        super(props);\r\nthis.state={\r\n    change:false,\r\n    id:null\r\n}\r\n    }\r\n\r\n    cardio=()=>{\r\n        this.props.history.push(\"/patient/newappointment/cardiology\")\r\n        let change=!this.state.change;\r\n        this.setState({\r\n            change:change,\r\n            id:1\r\n        })\r\n    }\r\n\r\n    neuro=()=>{\r\n        this.props.history.push(\"/patient/newappointment/neurology\")\r\n        let change=!this.state.change;\r\n        this.setState({\r\n            change:change,\r\n            id:2\r\n        })\r\n    }\r\n\r\n\r\n    uro=()=>{\r\n        this.props.history.push(\"/patient/newappointment/urology\")\r\n        let change=!this.state.change;\r\n        this.setState({\r\n            change:change,\r\n            id:3\r\n        })\r\n    }\r\n\r\n    render() {\r\n        //will have all the departmetns listed  and when we click on it redirects will list all the   1 and 11\r\n\r\n        return (\r\n\r\n            <Container fluid>\r\n                <Row>\r\n                   \r\n                        <Col sm=\"4\" >\r\n\r\n\r\n                            <nav className=\"navbar bg-light\">\r\n                                <ul className=\"navbar-nav\">\r\n                                <ButtonGroup vertical>\r\n                                    {/* <NavItem> */}\r\n                                  \r\n                                        <ButtonToggle onClick={this.cardio} outline color=\"info\" className=\"mb-2\" >Cardiology</ButtonToggle>\r\n                                    {/* </NavItem>\r\n                                    <NavItem> */}\r\n                                      \r\n                                        <ButtonToggle onClick={this.neuro} outline color=\"info\" className=\"mb-2\" >Neurology</ButtonToggle>\r\n                                    {/* </NavItem>\r\n                                    <NavItem> */}\r\n                                    <ButtonToggle onClick={this.uro} outline color=\"info\" className=\"mb-2\" >Urology  </ButtonToggle>\r\n                                        {/* <NavLink to=\"/patient/newappointment/urology\" className=\"nav-link \" activeClassName=\"active\">urology</NavLink> */}\r\n                                    {/* </NavItem> */}\r\n                                    </ButtonGroup>\r\n                                </ul>\r\n                            </nav>\r\n\r\n                            {/* this componets mus thave an update method */}\r\n\r\n                        </Col>\r\n                        <Col sm=\"8\">\r\n                        \r\n                        {this.state.id&&\r\n                        <DepartmentDoctorsComponentR departmentid={this.state.id}/>\r\n                        }\r\n\r\n                         </Col>\r\n\r\n                           \r\n\r\n                  \r\n                </Row>\r\n            </Container>\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n        )\r\n    }\r\n\r\n\r\n}\r\n\r\nexport let  NewAppointmentComponentR=withRouter( NewAppointmentComponent)","import { connect } from \"react-redux\";\r\n\r\n\r\nimport React from \"react\";\r\nimport { IState } from \"../../redux/reducers\";\r\nimport { Patient } from \"../../models/patient\";\r\nimport { Row, Container, Col, Card, CardBody, ListGroupItem, ListGroup } from \"reactstrap\";\r\nimport { LastRecord } from \"../../models/lastRecord\";\r\n\r\n\r\nexport class RecordPatientComponent extends React.Component<any,any>{\r\n\r\n\r\n    render(){\r\n\r\n\r\nif(this.props.patient){\r\n    let record:LastRecord=this.props.patient.lastRecord;\r\n    return(\r\n<>\r\n<Container>\r\n<Row>\r\n<Col>\r\n<Card>\r\n<CardBody>\r\n<ListGroup>\r\n    <ListGroupItem>Height: {record.height}</ListGroupItem>\r\n    <ListGroupItem>Weight: {record.weight}</ListGroupItem>\r\n    <ListGroupItem>Age: {record.age}</ListGroupItem>\r\n    <ListGroupItem>diagnosis: {record.diagnosis}</ListGroupItem>\r\n    <ListGroupItem>prescribed Action: {record.prescribedAction}</ListGroupItem>\r\n    <ListGroupItem>prescribed Medication: {record.prescribedMedication}</ListGroupItem>\r\n    <ListGroupItem>Notes: {record.notes}</ListGroupItem>\r\n   \r\n\r\n\r\n</ListGroup>\r\n\r\n\r\n\r\n</CardBody>\r\n\r\n\r\n\r\n</Card>\r\n\r\n\r\n\r\n</Col>\r\n</Row>\r\n</Container>\r\n\r\n\r\n\r\n</>\r\n\r\n\r\n\r\n\r\n    )\r\n}else{\r\n    return(\r\n        <p>No records</p>\r\n    )\r\n}\r\n\r\n\r\n\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state: IState) => {\r\n \r\n    return {\r\n      ...state.loginUser\r\n    }\r\n  \r\n  }\r\n  \r\n  const mapDispatchToProps = {\r\n\r\n\r\n  \r\n  \r\n  }\r\n  \r\n  \r\n  export let  RecordPatientComponentS = connect(mapStateToProps, mapDispatchToProps)(  RecordPatientComponent);\r\n ","import React from \"react\";\r\nimport { IState } from \"../../redux/reducers\";\r\nimport { CardBody, Card, Container, Row, Col, CardHeader } from \"reactstrap\";\r\nimport { Patient } from \"../../models/patient\";\r\nimport { connect } from \"react-redux\";\r\n\r\n\r\n\r\nexport class PatientCardComponent extends React.Component<any,any>{\r\n\r\n\r\n\r\n\r\n    render(){\r\n\r\n\r\n    if(this.props.patient){\r\n        let patient:Patient=this.props.patient;\r\n        return(\r\n<Container fluid>\r\n<Row>\r\n    <Col sm=\"6\">\r\n\r\n\r\n\r\n\r\n<Card className=\"card bg-info\">\r\n    <CardHeader>\r\n        <h2>{patient.firstName.toUpperCase()} {patient.lastName.toUpperCase()}</h2>\r\n        </CardHeader>\r\n<CardBody>\r\n        <p> Gender: {patient.gender}</p>\r\n        <p>BirthDate: {patient.birthDate}</p>\r\n        <p>Address: {patient.address}</p>\r\n        <p>Phone: {patient.phone}</p>\r\n        <p>Email: {patient.email}</p>\r\n\r\n\r\n\r\n\r\n</CardBody>\r\n\r\n\r\n</Card>\r\n</Col>\r\n</Row>\r\n</Container>\r\n\r\n\r\n\r\n\r\n\r\n\r\n        )\r\n    }else{\r\n        return(\r\n            <p></p>\r\n        )\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n}\r\n\r\n\r\nconst mapStateToProps = (state: IState) => {\r\n \r\n    return {\r\n      ...state.loginUser\r\n    }\r\n  \r\n  }\r\n  \r\n  const mapDispatchToProps = {\r\n\r\n\r\n  \r\n  \r\n  }\r\n  \r\n  \r\n  export let   PatientCardComponentS = connect(mapStateToProps, mapDispatchToProps)(   PatientCardComponent);","import React from \"react\";\r\nimport { Container, Form, FormGroup, Label, Button, Modal, Input } from \"reactstrap\";\r\nimport { saveEmergency } from \"../../api/apipatient\";\r\n\r\ninterface Inew{\r\n    patient:any,\r\n    ontoggle:any,\r\n    modal:any\r\n}\r\n\r\ninterface InewState{\r\n    name:any,\r\n    address:any,\r\n    relation:any,\r\n    phone:any\r\n\r\n\r\n\r\n}\r\n\r\nexport class NewEmergencyComponent extends React.Component<Inew,InewState>{\r\n\r\nconstructor(props:any){\r\n    super(props)\r\n\r\n    this.state={\r\n        name:\"\",\r\n        address:\"\",\r\n        relation:\"\",\r\n        phone:\"\"\r\n\r\n\r\n\r\n\r\n    }\r\n}\r\n\r\nchangepropmodal=()=>{\r\n    this.setState({\r\n        name:\"\",\r\n        address:\"\",\r\n        relation:\"\",\r\n        phone:\"\"\r\n    \r\n    \r\n    })\r\nthis.props.ontoggle();\r\n\r\n}\r\n\r\nonName=(event:any)=>{let x=event.target.value; this.setState({name:x})}\r\nonAddress=(event:any)=>{let x=event.target.value; this.setState({address:x})}\r\nonRelation=(event:any)=>{let x=event.target.value; this.setState({relation:x})}\r\nonPhone=(event:any)=>{let x=event.target.value; this.setState({phone:x})}\r\n\r\nonSubmits=async(event:any)=>{\r\n    event.preventDefault();\r\n    try{\r\n        let response=await saveEmergency(this.state.name,this.state.address,this.state.phone,this.state.relation,this.props.patient);\r\nconsole.log(response);\r\nthis.changepropmodal();\r\nthis.setState({\r\n    name:\"\",\r\n    address:\"\",\r\n    relation:\"\",\r\n    phone:\"\"\r\n\r\n\r\n})\r\n\r\n\r\n    }catch(e){\r\n        console.log(e);\r\n        this.changepropmodal();\r\n    }\r\n\r\n    \r\n\r\n    \r\n}\r\n\r\nrender(){\r\nreturn(\r\n    <Modal isOpen={this.props.modal}  >\r\n    <Container>\r\n    <Form onSubmit={this.onSubmits}>\r\n    <FormGroup>\r\n    <Label>Name</Label>\r\n    <Input type=\"text\" name=\"details\" value={this.state.name} onChange={this.onName} required />\r\n    \r\n    </FormGroup>\r\n    <FormGroup>\r\n    <Label>Address:</Label>\r\n    <Input type=\"text\" value={this.state.address}  onChange={this.onAddress} required />\r\n    </FormGroup>\r\n    <FormGroup>\r\n    <Label>Phone:</Label>\r\n    <Input value={this.state.phone} type=\"text\"  onChange={this.onPhone} required/>\r\n    </FormGroup>\r\n    <FormGroup>\r\n    <Label>Relation:</Label>\r\n    <Input value={this.state.relation} type=\"text\"  onChange={this.onRelation} required/>\r\n   \r\n    </FormGroup>\r\n    <Button type=\"submit\">Confirm</Button>\r\n    <Button onClick={this.changepropmodal} className=\"mt-1 mb-1 ml-1\">Cancel</Button>  \r\n    \r\n    \r\n    \r\n    \r\n    </Form>\r\n    \r\n     \r\n      </Container>\r\n    </Modal>  \r\n\r\n\r\n\r\n)\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n}","\r\n\r\nimport React from \"react\";\r\nimport { getEmergency } from \"../../api/apipatient\";\r\nimport { connect } from \"react-redux\";\r\nimport { IState } from \"../../redux/reducers\";\r\nimport { CardBody, Card, ListGroup, ListGroupItem, Container, Row, Col, Button } from \"reactstrap\";\r\nimport { Econtact } from \"../../models/econtact\";\r\nimport { NewEmergencyComponent } from \"./emergencyModal\";\r\n\r\n\r\n\r\n\r\nexport class EmergencyComponent extends React.Component<any,any>{\r\n\r\n    constructor(props:any){\r\n        super(props);\r\n        this.state={\r\n            econtacts:null,\r\n            toggle:false\r\n        }\r\n    }\r\n\r\n\r\n    componentDidMount=async()=>{\r\nthis.onChange();\r\n    \r\n\r\n      }\r\n\r\n\r\n      onChange=async()=>{\r\n        if(this.props.patient&&this.props.patient.patientId!=0){\r\n\r\n            try{\r\n                let response=await getEmergency(this.props.patient.patientId);\r\n                console.log(response);\r\n                this.setState({\r\n                    econtacts:response\r\n                })\r\n    \r\n            }catch(e){\r\n    \r\n    \r\n            }\r\n    \r\n        }\r\n\r\n\r\n\r\n      }\r\n\r\n      ontoggle=()=>{\r\n          let toggle=this.state.toggle;\r\n          this.setState({\r\n              toggle:!toggle\r\n          })\r\n          this.onChange();\r\n\r\n\r\n      }\r\n      \r\n  \r\n    \r\n    \r\n    \r\n    render(){\r\n        \r\n        if(this.state.econtacts){\r\n            let econtact:Econtact[]=this.state.econtacts;\r\n            return(\r\n                <Container fluid >\r\n                <Row>\r\n                    <Col sm=\"6\">  \r\n                    <Button onClick={this.ontoggle} className=\"mb-1\">Add New</Button>\r\n                    <NewEmergencyComponent ontoggle={this.ontoggle} modal={this.state.toggle} patient={this.props.patient}/>\r\n              { \r\n                  econtact.map((elem:any,i:any)=>{\r\n\r\n\r\n                    return(\r\n\r\n                                          \r\n<Card key={i}>\r\n\r\n<CardBody>\r\n<ListGroup>\r\n<ListGroupItem>\r\n    Name: {elem.name}\r\n</ListGroupItem>\r\n<ListGroupItem>\r\n    Address {elem.address}\r\n</ListGroupItem>\r\n<ListGroupItem>\r\n Phone: {elem.phone}\r\n</ListGroupItem>\r\n<ListGroupItem>\r\nrelation: {elem.relation}\r\n</ListGroupItem>\r\n\r\n</ListGroup>\r\n\r\n    \r\n</CardBody>\r\n    \r\n</Card>\r\n\r\n                \r\n             ) } )  } \r\n             \r\n             \r\n             </Col>\r\n</Row>\r\n</Container>\r\n             )\r\n\r\n\r\n\r\n        }else{\r\n            return(\r\n                <>\r\n                </>\r\n            )\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    }\r\n}\r\n\r\n\r\n\r\nconst mapStateToProps = (state: IState) => {\r\n\r\n \r\n    return {\r\n      ...state.loginUser\r\n    }\r\n  \r\n  }\r\n  \r\n  const mapDispatchToProps = {\r\n\r\n\r\n  \r\n  \r\n  }\r\n  \r\n  \r\n  export let   EmergencyComponentS = connect(mapStateToProps, mapDispatchToProps)(EmergencyComponent);","import React from \"react\";\r\n\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport { PatientNavigationComponent, PatientNavigationComponentSW } from \"./patientNavigation\";\r\nimport { PatientAppointmentComponent, PatientAppointmentComponentW } from \"./patientAppointment\";\r\nimport { NewAppointmentComponent, NewAppointmentComponentR } from \"./newAppointment\";\r\nimport { RecordPatientComponentS } from \"./recordpatient\";\r\nimport { PatientCardComponentS } from \"./patientCard\";\r\nimport { EmergencyComponentS } from \"./emergency\";\r\n\r\n\r\n\r\nexport class PatientHomeComponent extends React.Component<any,any>{\r\n\r\n\r\n    render(){\r\n\r\nreturn(\r\n    \r\n\r\n    <>\r\n  \r\n\r\n    <Router>\r\n        <PatientNavigationComponentSW/>\r\n        <Switch>\r\n            <Route path=\"/patient/appointments\"> \r\n           <PatientAppointmentComponentW/>\r\n            </Route>\r\n            <Route path=\"/patient/newappointment\">    \r\n<NewAppointmentComponentR/>\r\n            </Route>\r\n            <Route path=\"/patient/emergency\">    \r\n<EmergencyComponentS/>\r\n            </Route>\r\n            <Route path=\"/patient/record\">    \r\n< RecordPatientComponentS/>\r\n            </Route>\r\n\r\n\r\n\r\n            <Route path={[\"/patient/home\", \"*\"]}>\r\n<PatientCardComponentS/>\r\n            </Route>\r\n\r\n\r\n\r\n\r\n        </Switch>\r\n\r\n\r\n\r\n\r\n    </Router>\r\n\r\n\r\n\r\n\r\n\r\n    </>\r\n      \r\n)\r\n        \r\n    }\r\n\r\n\r\n}","import { loginSaveDoctor, loginSavePatient } from \"../redux/action-mappers\";\r\nimport { store } from \"../redux/store\";\r\nimport { project2 } from \"./apipatient\";\r\nimport { Doctor } from \"../models/doctor\";\r\nimport { Patient } from \"../models/patient\";\r\n\r\n\r\nexport let x=5;\r\n\r\n\r\nexport const loginDoctor=async(un:string,pas:string)=>{\r\n    try{\r\n        let response=await project2.post(\"/doctors/login\",{username:un,password:pas});\r\n        const{doctorId,firstName,lastName,speciality,username,password,department}=response.data;\r\n\r\n        let doctor=new Doctor(doctorId,firstName,lastName,speciality,username,password,department);\r\n        store.dispatch(loginSaveDoctor(doctor));\r\n        store.dispatch(loginSavePatient(new  Patient(0,\"\",\"\",\"\",\"\",\"\",0,\"\",\"\",\"\")));\r\n        return response;\r\n        }\r\n        catch(e){\r\n            throw e;\r\n        }\r\n\r\n\r\n\r\n\r\n\r\n}","import React from 'react';\r\nimport { Button, Container, Row, Col } from \"reactstrap\";\r\n\r\nimport { withRouter } from 'react-router-dom'\r\nimport { loginDoctor } from '../../api/apidoctor';\r\n\r\n\r\nexport class DoctorLoginComponent extends React.Component<any,any>{\r\n\r\nconstructor(props:any){\r\n    super(props);\r\n    this.state={\r\n        username:\"\",\r\n        password:\"\"\r\n    }\r\n\r\n}\r\n\r\n\r\n\r\nverifyUser=async(event:any)=>{\r\n    event.preventDefault();\r\n   \r\n    try{\r\nlet doctor =await loginDoctor(this.state.username,this.state.password);\r\nconsole.log(doctor);\r\nthis.props.history.push(\"/doctor/home\");\r\n\r\n\r\n    }catch(e){\r\n        // toast(\"invalid credentials\", { type: \"error\" });\r\n        console.log(e);\r\n\r\n    }\r\n    // this.props.history.push(\"/doctor/home\");\r\n\r\n\r\n}\r\n\r\nsetUsername=(event:any)=>{\r\n    let username = event.target.value;\r\n    this.setState({\r\n        username: username\r\n    })\r\n\r\n\r\n}\r\n\r\nsetPassword=(event:any)=>{\r\n    let password = event.target.value;\r\n    this.setState({\r\n        password: password\r\n    })\r\n\r\n}\r\n\r\n\r\n\r\n\r\n    render(){\r\n\r\n\r\n        return(\r\n            <div className=\"row align-items-center justify-content-center \" style={{ height: \"80%\" }}  >\r\n            <div className=\"login-column\">\r\n            <form onSubmit={this.verifyUser} className=\"form-signin \" >\r\n                <h2 > Please Sign In</h2>\r\n                <br/>\r\n                <div className=\"form-group\">\r\n                    <label><span className=\"font-weight-bold\">UserName:</span><input type=\"text\" className=\"form-control\" value={this.state.username} onChange={this.setUsername} required /></label>\r\n                </div>\r\n                <div className=\"form-group\">\r\n                    <label><span className=\"font-weight-bold\">Password:</span><input type=\"password\" className=\"form-control\" value={this.state.password} onChange={this.setPassword} required /></label>\r\n                </div>\r\n                {/* <button className=\"btn btn-primary\" type=\"submit\">Login</button> */}\r\n                <Button color=\"primary\" className=\"btn-block\">Login</Button>\r\n            </form>\r\n            </div>\r\n            </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n        )\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n\r\nexport const DoctorLoginComponentR=withRouter(DoctorLoginComponent);","\r\nimport React from \"react\";\r\n\r\n\r\n\r\n\r\nexport class DoctorAppointmentComponent extends React.Component<any,any>{\r\n\r\n\r\nrender(){\r\n\r\nreturn(\r\n\r\n\r\n<p>Hellos here will be all the appointments related to him sorted by date</p>\r\n\r\n\r\n)\r\n\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\n\r\n","import React from \"react\";\r\nimport { Navbar, Nav, NavbarBrand, NavItem, Button } from \"reactstrap\";\r\n\r\nimport { NavLink, withRouter } from 'react-router-dom';\r\nimport { IState } from \"../../redux/reducers\";\r\nimport { loginSaveDoctor,loginSavePatient } from \"../../redux/action-mappers\";\r\nimport { connect } from \"react-redux\";\r\n\r\n\r\n\r\nexport class DoctorNavigationComponent extends React.Component<any,any>{\r\n\r\n\r\n\r\n    logoutUser = (e: any) => {\r\n   \r\n        // console.log(this.props.location.pathname)\r\n        this.props.loginSaveDoctor(null);\r\n        this.props.loginSavePatient(null);\r\n        this.props.history.push(\"/home\");\r\n    \r\n    \r\n      }\r\n\r\n\r\n\r\n    render(){\r\n\r\nreturn(\r\n\r\n\r\n<>\r\n    <Navbar  color=\"light\" light expand=\"md\">\r\n\r\n    <Nav  tabs className=\"w-100\">\r\n    <NavbarBrand>\r\n                  \r\n               \r\n              </NavbarBrand>\r\n      <NavItem>\r\n        <NavLink  to=\"/doctor/appointments\" className=\"nav-link\" activeClassName=\"active\">View Appointments</NavLink>\r\n      </NavItem>\r\n      <NavItem>\r\n        <NavLink  to=\"\" className=\"nav-link\" activeClassName=\"active\">New Appointment Later</NavLink>\r\n      </NavItem>\r\n      <NavItem className=\"float-right\" tag={() => { return <Button className=\"float-right\" onClick={this.logoutUser} color=\"primary\" outline>Logout</Button> }} />\r\n    \r\n    \r\n\r\n\r\n    </Nav>\r\n    \r\n  </Navbar>\r\n  </>\r\n\r\n)\r\n\r\n    }\r\n\r\n\r\n\r\n    \r\n}\r\n\r\n\r\nconst mapStateToProps = (state: IState) => {\r\n \r\n    return {\r\n      ...state.loginUser\r\n    }\r\n  \r\n  }\r\n  \r\n  const mapDispatchToProps = {\r\nloginSaveDoctor,\r\nloginSavePatient\r\n  \r\n  \r\n  }\r\n  \r\n  \r\n  export let DoctorNavigationComponentS = connect(mapStateToProps, mapDispatchToProps)(DoctorNavigationComponent);\r\n  export let DoctorNavigationComponentSW=withRouter(DoctorNavigationComponentS);","\r\n\r\n\r\n\r\nimport React from \"react\";\r\n\r\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\r\nimport { DoctorAppointmentComponent } from \"./doctorAppointments\";\r\nimport { DoctorNavigationComponent, DoctorNavigationComponentS, DoctorNavigationComponentSW } from \"./doctorNavigation\";\r\nimport { store } from \"../../redux/store\";\r\nimport { Provider } from \"react-redux\";\r\nimport { DoctorLoginComponentR } from \"./doctorlogin\";\r\n\r\n\r\n\r\n\r\nexport class DoctorHomeComponent extends React.Component<any,any>{\r\n\r\n\r\n    render(){\r\n\r\nreturn(\r\n    \r\n\r\n    <>\r\n    <p>DoctorHome</p>\r\n<Provider store={store}>\r\n    \r\n    <Router>\r\n    <DoctorNavigationComponentSW/>\r\n        <Switch>\r\n            <Route path=\"/doctor/appointments\"> \r\n        <DoctorAppointmentComponent/>\r\n            </Route>\r\n            <Route path=\"/patient/newappointment\">    \r\n\r\n            </Route>\r\n\r\n\r\n            <Route path=\"*\">\r\npatient card\r\n            </Route>\r\n\r\n\r\n\r\n\r\n        </Switch>\r\n\r\n\r\n\r\n\r\n    </Router>\r\n\r\n\r\n\r\n    </Provider>\r\n\r\n    </>\r\n      \r\n)\r\n        \r\n    }\r\n\r\n\r\n}","\r\n\r\nimport React from \"react\";\r\nimport { Container, Row, Col, Form, Label, FormGroup, Input, Button } from \"reactstrap\";\r\nimport { Patient } from \"../../models/patient\";\r\nimport { createPatient } from '../../api/apipatient';\r\nimport { withRouter } from \"react-router-dom\";\r\n\r\ninterface Icreate{\r\n\r\n    firstName:string;\r\n    lastName:string;\r\n    gender:string;\r\n    username:string;\r\n    password:string;\r\n    birthDate:any;\r\n    address:string;\r\n    phone:string;\r\n    email:string;\r\n\r\n}\r\n\r\n\r\n\r\nexport class CreateAccountComponent extends React.Component<any,Icreate>{\r\n\r\n\r\nconstructor(props:any){\r\n    super(props);\r\n    this.state={\r\n        firstName:\"\",\r\n    lastName:\"\",\r\n    gender:\"\",\r\n    username:\"\",\r\n    password:\"\",\r\n    birthDate:\"\",\r\n    address:\"\",\r\n    phone:\"\",\r\n    email:\"\"\r\n        \r\n\r\n\r\n    }\r\n}\r\n\r\n\r\n    onfirstSubmits=(event:any)=>{\r\n        let firstName=event.target.value;\r\n        this.setState({\r\n            firstName:firstName\r\n        })\r\n        \r\n    }\r\n\r\n    onlastSumbits=(event:any)=>{\r\n        let x=event.target.value;\r\n        this.setState({\r\n            lastName:x\r\n        })\r\n        }\r\n\r\n        ongenderSubmits=(event:any)=>{ let x=event.target.value; this.setState({ gender:x }) }\r\n        onusernameSubmits=(event:any)=>{ let x=event.target.value; this.setState({ username:x }) }\r\n        onpasswordSubmits=(event:any)=>{ let x=event.target.value;console.log(x); this.setState({ password:x }) }\r\n        ondateSubmits=(event:any)=>{ let x=event.target.value; console.log(x); this.setState({ birthDate:x }) }\r\n        onaddSubmits=(event:any)=>{ let x=event.target.value; this.setState({ address:x }) }\r\n        onphoneSubmits=(event:any)=>{ let x=event.target.value; this.setState({ phone:x }) }\r\n        onemailSubmits=(event:any)=>{ let x=event.target.value; this.setState({ email:x }) }\r\n\r\n        FormOnSUbmit=async(event:any)=>{\r\n            event.preventDefault();\r\n            try{\r\n\r\n                \r\n                       let response=await createPatient(this.state.firstName,this.state.lastName,this.state.gender,this.state.username,this.state.password\r\n                        ,this.state.birthDate,this.state.address,this.state.phone,this.state.email);\r\n                       this.props.history.push(\"/patientlogin\")\r\n\r\n            }catch(e){\r\n\r\nconsole.log(e);\r\n\r\n            }\r\n\r\n        }\r\n\r\n\r\n    render(){\r\n\r\n\r\nreturn(\r\n\r\n<Container >\r\n    <Row  >\r\n        <Col sm=\"5\" >\r\n<div className=\"h-10 w-70\" style={{ height: \"60%\" }}>\r\n                               <Form onSubmit={this.FormOnSUbmit}>\r\n                                <FormGroup>\r\n                                    <Label for=\"userId\">First Name  </Label>\r\n                                    <Input type=\"text\"  value={this.state.firstName} onChange={this.onfirstSubmits} required/>\r\n\r\n                                </FormGroup>\r\n                                <FormGroup>\r\n                                    <Label>last Name  </Label>\r\n                                    <Input type=\"text\" value={this.state.lastName} onChange={this.onlastSumbits} required />\r\n\r\n                                </FormGroup>\r\n                                <FormGroup>\r\n                                    <Label>Gender   </Label>\r\n                                    <Input type=\"text\"  onChange={this.ongenderSubmits} value={this.state.gender} required />\r\n\r\n                                </FormGroup>\r\n                                <FormGroup>\r\n                                    <Label>username </Label>\r\n                                    <Input type=\"text\"  onChange={this.onusernameSubmits} value={this.state.username} required />\r\n\r\n                                </FormGroup>\r\n                                <FormGroup>\r\n                                    <Label>password  </Label>\r\n                                    <Input type=\"text\"  onChange={this.onpasswordSubmits} value={this.state.password} required />\r\n\r\n                                </FormGroup>\r\n                                <FormGroup>\r\n                                    <Label>Birth Date:  </Label>\r\n                                    <Input type=\"date\"  value={this.state.birthDate} onChange={this.ondateSubmits} />\r\n\r\n                                </FormGroup>\r\n                                <FormGroup>\r\n                                    <Label>Email </Label>\r\n                                    <Input type=\"text\"  value={this.state.email} onChange={this.onemailSubmits} />\r\n\r\n                                </FormGroup>\r\n                                <FormGroup>\r\n                                    <Label>Address </Label>\r\n                                    <Input type=\"text\"  value={this.state.address} onChange={this.onaddSubmits} />\r\n\r\n                                </FormGroup>\r\n                                <FormGroup>\r\n                                    <Label>Phone: </Label>\r\n                                    <Input type=\"text\"  value={this.state.phone} onChange={this.onphoneSubmits} />\r\n\r\n                                </FormGroup>\r\n                                <FormGroup>\r\n                                    <Button type=\"submit\" color=\"info\">Submit</Button>\r\n                                </FormGroup>\r\n                            </Form>\r\n                            </div>\r\n        \r\n        \r\n        \r\n        \r\n        </Col>\r\n    </Row>\r\n</Container>\r\n\r\n)\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\nexport let CreateAccountComponentW=withRouter(CreateAccountComponent);","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom';\r\nimport { HomePageComponent } from './components/homepage';\r\nimport { PatientLoginComponentR, PatientLoginComponent } from './components/patients/patientLogin';\r\nimport { HomeNavigationComponent } from './components/HomeNavigation';\r\nimport { PatientHomeComponent } from './components/patients/patienthome';\r\nimport { DoctorLoginComponent, DoctorLoginComponentR } from './components/doctor/doctorlogin';\r\nimport { DoctorHomeComponent } from './components/doctor/doctorHome';\r\nimport { Provider, connect } from 'react-redux';\r\nimport { store } from './redux/store';\r\nimport { ToastContainer } from 'react-toastify';\r\nimport { IState } from './redux/reducers';\r\nimport { loginSaveDoctor, loginSavePatient } from \"./redux/action-mappers\";\r\nimport { render } from '@testing-library/react';\r\nimport { Doctor } from './models/doctor';\r\nimport { Patient } from './models/patient';\r\nimport { Department } from './models/department';\r\nimport { CreateAccountComponent, CreateAccountComponentW } from './components/patients/createAccount';\r\n\r\n\r\nexport class App extends React.Component<any,any> {\r\n\r\n  constructor(props:any){\r\n\r\n    super(props);\r\n     this.state={\r\n       doctor:null,\r\n     patient:null\r\n     }\r\n  }\r\n\r\n\r\n  \r\n   \r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n  render() {\r\n\r\nif(this.props.doctor===null&&this.props.patient===null){\r\n  return(\r\n    <Router>\r\n    <Switch>\r\n<Route path=\"/createaccount\">\r\n<CreateAccountComponentW/>\r\n</Route>\r\n\r\n    <Route path=\"/patientlogin\">\r\n      <PatientLoginComponentR/>\r\n    </Route>\r\n    <Route path=\"/doctorlogin\">\r\n      <DoctorLoginComponentR/>\r\n    </Route>\r\n    \r\n{/*     \r\n    <Route path=\"/patient/home\">\r\n    <PatientHomeComponent/>\r\n    </Route>\r\n    \r\n    <Route path=\"/doctor/home\">\r\n    <DoctorHomeComponent/>\r\n    </Route> */}\r\n    \r\n    <Route path={[\"/home\",\"*\"]}>\r\n    <HomeNavigationComponent/>\r\n    <HomePageComponent/>\r\n    </Route>\r\n    \r\n    \r\n    \r\n    \r\n    </Switch>\r\n    \r\n    \r\n    \r\n        </Router>\r\n\r\n\r\n\r\n\r\n\r\n\r\n  )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n    \r\n    return(\r\n\r\n\r\n  <>\r\n\r\n    <Router>\r\n<Switch>\r\n<Route path=\"/createaccount\">\r\n<CreateAccountComponentW/>\r\n</Route>\r\n<Route path=\"/patientlogin\">\r\n  <PatientLoginComponentR/>\r\n</Route>\r\n<Route path=\"/doctorlogin\">\r\n  <DoctorLoginComponentR/>\r\n</Route>\r\n\r\n\r\n<Route path=\"/patient/home\">\r\n<PatientHomeComponent/>\r\n</Route>\r\n\r\n<Route path=\"/doctor/home\">\r\n<DoctorHomeComponent/>\r\n</Route>\r\n\r\n<Route path={[\"/home\",\"*\"]}>\r\n<HomeNavigationComponent/>\r\n<HomePageComponent/>\r\n</Route>\r\n\r\n\r\n\r\n\r\n</Switch>\r\n\r\n\r\n\r\n    </Router>\r\n  \r\n  \r\n    <ToastContainer />\r\n  \r\n\r\n</>\r\n\r\n\r\n\r\n\r\n)\r\n// }\r\n};\r\n  \r\n}\r\n\r\nexport default App;\r\n\r\n\r\nconst mapStateToProps = (state: IState) => {\r\n \r\n  return {\r\n    ...state.loginUser\r\n  }\r\n\r\n}\r\n\r\nconst mapDispatchToProps = {\r\nloginSaveDoctor,\r\nloginSavePatient\r\n\r\n\r\n}\r\n\r\n\r\nexport let AppS = connect(mapStateToProps, mapDispatchToProps)(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App, { AppS } from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Provider } from 'react-redux';\r\nimport { store } from './redux/store';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n    <AppS />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}